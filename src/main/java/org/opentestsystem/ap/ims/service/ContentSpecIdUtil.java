package org.opentestsystem.ap.ims.service;

import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.opentestsystem.ap.common.model.ItemConstants;
import org.opentestsystem.shared.contentspecid.ContentSpecId;
import org.opentestsystem.shared.contentspecid.ContentSpecIdConverter;
import org.opentestsystem.shared.contentspecid.enums.ContentSpecFormat;
import org.opentestsystem.shared.contentspecid.enums.ContentSpecGrade;
import org.opentestsystem.shared.contentspecid.enums.ContentSpecSubject;
import org.opentestsystem.shared.contentspecid.exceptions.ErrorSeverity;
import org.opentestsystem.shared.contentspecid.exceptions.ValidationException;
import org.springframework.stereotype.Component;

import javax.annotation.Nonnull;

import static org.apache.commons.lang3.StringUtils.EMPTY;
import static org.apache.commons.lang3.StringUtils.isBlank;
import static org.opentestsystem.shared.contentspecid.ContentSpecIdBuilder.getBuilder;
import static org.opentestsystem.shared.contentspecid.enums.ContentSpecSubject.MATH;

/**
 * Builds a content spec ID from component parts and formats it into an Enhanced syntax string.
 */
@Component
@Slf4j
public class ContentSpecIdUtil {
    private ContentSpecIdConverter converter;

    public ContentSpecIdUtil(ContentSpecIdConverter converter) {
        this.converter = converter;
    }

    /**
     * Formats the given components into an Enhanced format ID string. Logs warning if ID cannot be produced.
     *
     * @param itemId        ID of item that defines these components, used in log messages
     * @param subjectString subject either "Math" or "ELA".
     * @param gradeString   intended grade level as a string, K, HS, or any of 1 - 12
     * @param claim         claim 1 - 4
     * @param target        target information, which should be a number or letter depending on subject
     * @param ccss          common core state standard string
     * @param domain        domain code
     * @return String with formatted ID, or empty string if ID cannot be produced.
     */
    @SuppressWarnings("WeakerAccess")
    public String formatId(String itemId,
                           String subjectString,
                           String gradeString,
                           String claim,
                           String target,
                           String ccss,
                           String domain) {

        return formatId(itemId, subjectString, gradeString, claim, target, ccss, domain, null);
    }

    /**
     * Formats the given components into an Enhanced format ID string. Logs warning if ID cannot be produced.
     *
     * @param itemId        ID of item that defines these components, used in log messages
     * @param subjectString subject either "Math" or "ELA".
     * @param gradeString   intended grade level as a string, K, HS, or any of 1 - 12
     * @param claim         claim 1 - 4
     * @param target        target information, which should be a number or letter depending on subject
     * @param ccss          common core state standard string
     * @param domain        domain code
     * @param emphasis      m or a/s, or blank.
     * @return String with formatted ID, or empty string if ID cannot be produced.
     */
    @SuppressWarnings("WeakerAccess")
    public String formatId(String itemId,
                           String subjectString,
                           String gradeString,
                           String claim,
                           String target,
                           String ccss,
                           String domain,
                           String emphasis) {

        // If any core data is blank, we cannot create ID.
        // Core data is subject, grade, claim, target, domain.
        if (StringUtils.isAnyBlank(subjectString, gradeString, claim, target, domain)) {
            log.info("Enhanced ID info: skipping creation of Enhanced ID for ID " + itemId +
                    " because of missing data.");
            return EMPTY;
        }

        try {
            ContentSpecSubject subject = convertSubject(subjectString);
            ContentSpecGrade grade = convertGrade(gradeString);


            if (grade == ContentSpecGrade.UNSPECIFIED) {
                throw new ValidationException(ErrorSeverity.INVALID, "Grade is invalid: " + gradeString);
            }

            if (subject == MATH && isBlank(ccss)) {
                throw new ValidationException(ErrorSeverity.INVALID, "CCSS cannot be blank for Math IDs");
            }

            // Fix for N/A emphasis
            if (StringUtils.equalsIgnoreCase(emphasis, "n/a")) {
                emphasis = "NA";
            }

            ContentSpecId id = getBuilder(subject, grade)
                    .claim(claim)
                    .ccss(ccss)
                    .target(target)
                    .emphasis(emphasis)
                    .domain(domain)
                    .build();

            return converter.format(id, ContentSpecFormat.ENHANCED);

        } catch (ValidationException ve) {
            log.warn("Enhanced ID issue: cannot create Enhanced ID for Item ID " + itemId
                    + ": " + ve.getErrorDescription());

            // For now, we just return empty string for error conditions.
            return EMPTY;
        }
    }

    private ContentSpecSubject convertSubject(@Nonnull String subjectString) {
        if (subjectString.trim().equalsIgnoreCase(ItemConstants.ItemSubject.SUBJECT_MATH)) {
            return ContentSpecSubject.MATH;
        }
        if (subjectString.trim().equalsIgnoreCase(ItemConstants.ItemSubject.SUBJECT_ELA)) {
            return ContentSpecSubject.ELA;
        }

        return ContentSpecSubject.UNSPECIFIED;
    }

    private ContentSpecGrade convertGrade(String gradeString) throws ValidationException {
        ContentSpecGrade grade = ContentSpecGrade.fromString(gradeString);
        if (grade == ContentSpecGrade.UNSPECIFIED) {
            throw new ValidationException(ErrorSeverity.INVALID, "Invalid Grade: " + grade);
        }

        return grade;
    }
}

