package org.opentestsystem.ap.ims.service.export.writer;

import com.itextpdf.html2pdf.ConverterProperties;
import com.itextpdf.kernel.pdf.PdfWriter;
import com.itextpdf.layout.Document;
import org.apache.commons.lang3.StringUtils;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemConstants;
import org.opentestsystem.ap.common.model.WerItem;
import org.opentestsystem.ap.ims.model.export.AdditionalInfo;
import org.opentestsystem.ap.ims.model.export.ItemExport;
import org.opentestsystem.ap.ims.model.export.WerExemplarRubric;
import org.opentestsystem.ap.ims.model.export.WerExportData;
import org.springframework.stereotype.Component;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Component
public class WerItemContentWriter extends PdfContentWriter implements ItemContentWriter {
    private static final String template = "wer-export";

    @Override
    public boolean supportsItemType(final Item item) {
        return item instanceof WerItem;
    }

    @Override
    public void addContent(final PdfWriter pdfWriter, final Document document, ConverterProperties properties, ItemExport itemExport) {
        Map<String, Object> data = new HashMap<>();
        WerExportData exportItemData;
        String itemId = itemExport.getItem().getId();
        String content = getPromptContent(itemExport.getItemRelease());
        AdditionalInfo info = AdditionalInfo.create(itemExport);

        if (itemExport.isIncludeRubrics()) {
            exportItemData = new WerExportData(itemId, content, info, true, findExemplarsAndRubric(itemExport));
        } else {
            exportItemData = new WerExportData(itemId, content, info, false);
        }

        data.put("data", exportItemData);

        String html = convertHtml(template, data);

        //TODO - Remove before final commit
        writeHtmlToFile(itemExport, html);

        addHtmlToPdf(document, properties, itemExport, html);
    }

    private WerExemplarRubric findExemplarsAndRubric(final ItemExport itemExport) {
        if (!itemExport.isIncludeRubrics()) {
            return new WerExemplarRubric();
        }

        WerItem werItem = (WerItem) itemExport.getItem();

        String enRubric = werItem.getCore().getEn().getRubric();
        String espRubric = StringUtils.EMPTY;
        List<String> espExemplars = new ArrayList<>();
        List<String> enExemplars = new ArrayList<>(translateContents(itemExport, ItemConstants.ItemLanguage.LANG_ENU, werItem.getCore().getEn().getExemplarResponses()));

        if (werItem.getTranslations() != null && werItem.getTranslations().getEsp() != null) {
            espExemplars.addAll(translateContents(itemExport, ItemConstants.ItemLanguage.LANG_ESN, werItem.getTranslations().getEsp().getExemplarResponses()));
            espRubric = werItem.getTranslations().getEsp().getRubric();
        }

        return new WerExemplarRubric(enExemplars, espExemplars, enRubric, espRubric);
    }
}
