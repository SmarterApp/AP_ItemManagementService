package org.opentestsystem.ap.ims.service.export.writer;

import org.apache.commons.lang3.StringUtils;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemOption;
import org.opentestsystem.ap.common.model.MsItem;
import org.opentestsystem.ap.ims.model.export.AdditionalInfo;
import org.opentestsystem.ap.ims.model.export.ItemExport;
import org.opentestsystem.ap.ims.model.export.MsExportData;
import org.opentestsystem.ap.ims.model.export.Option;
import org.springframework.data.util.Pair;
import org.springframework.stereotype.Component;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Component
public class MsItemContentWriter extends PdfContentWriter implements ItemContentWriter {
    private static final String template = "ms-export";

    @Override
    public boolean supportsItemType(final Item item) {
        return item instanceof MsItem;
    }

    @Override
    public String getHtml(final ItemExport itemExport) {
        Map<String, Object> data = new HashMap<>();

        MsItem item = (MsItem) itemExport.getItem();
        Pair<String, String> promptContent = getPromptContent(itemExport, item);
        AdditionalInfo additionalInfo = AdditionalInfo.create(itemExport);

        List<ItemOption> englishOptions = item.getCore().getEn().getOptions();
        List<ItemOption> spanishOptions = new ArrayList<>();

        if (item.getTranslations() != null
                && item.getTranslations().getEsp() != null
                && item.getTranslations().getEsp().getOptions() != null) {
            spanishOptions.addAll(item.getTranslations().getEsp().getOptions());
        }

        List<ItemOption> largerOptionList = englishOptions.size() > spanishOptions.size() ? englishOptions : spanishOptions;
        List<Option> combinedOptions = new ArrayList<>();
        List<Option> correctAnswers = new ArrayList<>();

        for (int i = 0; i < largerOptionList.size(); i++) {
            ItemOption spanishOption = spanishOptions.size() > i ? spanishOptions.get(i) : null;
            ItemOption englishOption = englishOptions.size() > i ? englishOptions.get(i) : null;

            String englishText = englishOption == null ? StringUtils.EMPTY : translateSpanishContent(itemExport, englishOption.getText());
            String spanishText = spanishOption == null ? StringUtils.EMPTY : translateSpanishContent(itemExport, spanishOption.getText());

            Option option = new Option(spanishText, englishText);
            combinedOptions.add(option);

            if (englishOption != null && englishOption.isCorrectAnswer()) {
                correctAnswers.add(option);
            }
        }

        MsExportData exportData = new MsExportData(item.getId(), promptContent.getFirst(), promptContent.getSecond(), additionalInfo, itemExport.isIncludeRubrics(), combinedOptions, correctAnswers);

        data.put("data", exportData);

        String html = convertHtml(template, data, itemExport);

        writeHtmlToFile(itemExport, html);

        return html;
    }

    private Pair<String, String> getPromptContent(ItemExport itemExport, MsItem item) {
        String englishContent = translateEnglishContent(itemExport, item.getCore().getEn().getPrompt());

        String spanishContent = StringUtils.EMPTY;
        if (item.getTranslations() != null && item.getTranslations().getEsp() != null) {
            spanishContent = translateSpanishContent(itemExport, item.getTranslations().getEsp().getPrompt());
        }

        return Pair.of(englishContent, spanishContent);
    }
}
