/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestsystem.ap.ims.service;

import lombok.extern.slf4j.Slf4j;
import org.opentestsystem.ap.common.bulkupdate.BulkUpdateService;
import org.opentestsystem.ap.common.management.ItemManager;
import org.opentestsystem.ap.common.model.AttachmentRequest;
import org.opentestsystem.ap.common.security.SecurityUtil;
import org.opentestsystem.ap.ims.model.UploadFile;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import java.io.InputStream;
import java.util.List;

/**
 * Handles file requests like uploading, downloading, and retrieving item files.
 */
@Slf4j
@Service
public class AttachmentService {

    private static final String BULK_PREVIEW_FILE_DELIMITER = ",";

    private final ItemManager itemManager;

    private final BulkUpdateService bulkUpdateService;

    private final SecurityUtil securityUtil;

    public AttachmentService(ItemManager itemManager,
                             BulkUpdateService bulkUpdateService,
                             SecurityUtil securityUtil) {
        this.itemManager = itemManager;
        this.bulkUpdateService = bulkUpdateService;
        this.securityUtil = securityUtil;
    }

    // ------------------------------------------------------------------------

    /**
     * Validates and processes the file upload request.
     *
     * @param uploadFile The upload request holding information like item ID, transaction ID, and the file(s).
     */
    @Transactional
    public void saveAttachment(UploadFile uploadFile) {
        uploadFile.validate();

        String itemId = uploadFile.getItemId();
        MultipartFile file = uploadFile.getFile();

        log.debug("Saving attachment {} for item {}", file.getOriginalFilename(), itemId);

        AttachmentRequest attachmentRequest = uploadFile.newAttachmentRequest();

        itemManager.saveAttachment(securityUtil.getItemBankUser(), itemId, attachmentRequest, file);
    }

    @Transactional(readOnly = true)
    public InputStream getAttachment(String itemId, String fileName) {
        return this.itemManager.getAttachment(securityUtil.getItemBankUser(), itemId, fileName);
    }

    public List<String> findAttachments(String itemid, String branch) {
        return this.itemManager.findAttachments(securityUtil.getItemBankUser(), itemid, branch);
    }

    // ------------------------------------------------------------------------

    /**
     * Reads an uploaded text file. Replaces carriage returns with comma delimiter
     *
     * @param uploadFile
     * @return comma delimited string
     */
    // TODO: IAT-1772 - Remove after item search dashboard implemented
    public String convertBulkPreviewFile(final UploadFile uploadFile) {
        log.debug("Converting bulk preview file");
        String content = "";
        try {
            content = new String(uploadFile.getFile().getBytes(), "UTF-8");
        } catch (Exception ex) {
            log.error("Error reading bulk preview file", ex);
        }

        content = content.replace(" ", "");
        content = content.replace("\n", BULK_PREVIEW_FILE_DELIMITER);
        if (content.length() > 0 && content.charAt(content.length() - 1) == ',') {
            content = content.substring(0, content.length() - 1);
        }

        return content;
    }

    /**
     * Returns bytes of uploaded file.
     *
     * @param uploadFile
     * @return
     */
    public String readFileContents(final UploadFile uploadFile) {
        try {
            return new String(uploadFile.getFile().getBytes(), "UTF-8");
        } catch (Exception ex) {
            log.error("Error reading file contents", ex);
            return "";
        }
    }

    /**
     * Bulk updates Test Administration data for multiple items.
     *
     * @param uploadFile
     */
    public void processTestAdministrationData(final UploadFile uploadFile) {
        log.debug("Uploading file to bulk upload test administration data ");
        this.bulkUpdateService.processTestAdministrationData(securityUtil.getItemBankUser(), uploadFile.getFile());
    }
}
