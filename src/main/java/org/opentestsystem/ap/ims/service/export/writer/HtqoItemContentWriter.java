package org.opentestsystem.ap.ims.service.export.writer;

import com.itextpdf.html2pdf.ConverterProperties;
import com.itextpdf.kernel.pdf.PdfWriter;
import com.itextpdf.layout.Document;
import org.apache.commons.lang3.StringUtils;
import org.opentestsystem.ap.common.model.HtqoItem;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.content.HtqoItemContent;
import org.opentestsystem.ap.ims.model.export.AdditionalInfo;
import org.opentestsystem.ap.ims.model.export.HtqoExportData;
import org.opentestsystem.ap.ims.model.export.ItemExport;
import org.opentestsystem.ap.ims.model.export.Option;
import org.springframework.stereotype.Component;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Component
public class HtqoItemContentWriter extends PdfContentWriter implements ItemContentWriter {
    private static final String template = "htqo-export";

    @Override
    public boolean supportsItemType(final Item item) {
        return item instanceof HtqoItem;
    }

    @Override
    public void addContent(final PdfWriter pdfWriter, final Document document, final ConverterProperties properties, final ItemExport itemExport) {
        Map<String, Object> data = new HashMap<>();

        HtqoItem item = (HtqoItem) itemExport.getItem();
        String promptContent = getPromptContent(itemExport.getItemRelease());
        AdditionalInfo additionalInfo = AdditionalInfo.create(itemExport);

        List<Option> options = getOptions(itemExport, item);

        List<Option> correctOrderedOptions = new ArrayList<>();

        for (Integer correctItemNumber : item.getCore().getEn().getHtqOrderable().getOrderableStringsCorrectOrder()) {
            if (correctItemNumber < options.size()) {
                correctOrderedOptions.add(options.get(correctItemNumber));
            }
        }

        HtqoExportData exportData = new HtqoExportData(item.getId(), promptContent, additionalInfo, itemExport.isIncludeRubrics(), options, correctOrderedOptions);

        data.put("data", exportData);

        String html = convertHtml(template, data);

        writeHtmlToFile(itemExport, html);

        addHtmlToPdf(document, properties, convertSvgToPng(html, itemExport.getClonedItemDirectory()));
    }

    private List<Option> getOptions(final ItemExport itemExport, final HtqoItem item) {
        List<String> englishOptions = item.getCore().getEn().getHtqOrderable().getOrderableStrings();
        List<String> spanishOptions = new ArrayList<>();

        if (item.getTranslations() != null
                && item.getTranslations().getEsp() != null
                && item.getTranslations().getEsp().getHtqOrderable() != null) {
            HtqoItemContent content = item.getTranslations().getEsp();
            spanishOptions.addAll(content.getHtqOrderable().getOrderableStrings());
        }

        List<String> largerOptionList = englishOptions.size() > spanishOptions.size() ? englishOptions : spanishOptions;
        List<Option> combinedOptions = new ArrayList<>();

        for (int i = 0; i < largerOptionList.size(); i++) {
            String spanishOption = spanishOptions.size() > i ? spanishOptions.get(i) : StringUtils.EMPTY;
            String englishOption = englishOptions.size() > i ? englishOptions.get(i) : StringUtils.EMPTY;

            combinedOptions.add(new Option(translateSpanishContent(itemExport, spanishOption), translateEnglishContent(itemExport, englishOption)));
        }

        return combinedOptions;
    }
}
