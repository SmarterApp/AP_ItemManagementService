package org.opentestsystem.ap.ims.service.export.writer;

import org.apache.commons.lang3.StringUtils;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import org.opentestsystem.ap.common.model.HtqsItem;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.ims.model.export.AdditionalInfo;
import org.opentestsystem.ap.ims.model.export.HtqsExportData;
import org.opentestsystem.ap.ims.model.export.ItemExport;
import org.springframework.data.util.Pair;
import org.springframework.stereotype.Component;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.apache.commons.lang.StringUtils.EMPTY;

@Component
public class HtqsItemContentWriter extends PdfContentWriter implements ItemContentWriter {
    private static final String template = "htqs-export";

    @Override
    public boolean supportsItemType(final Item item) {
        return item instanceof HtqsItem;
    }

    @Override
    public String getHtml(ItemExport itemExport) {
        HtqsItem item = (HtqsItem) itemExport.getItem();

        String englishInteractiveText = translateEnglishContent(itemExport, item.getCore().getEn().getHtqSelectable().getInteractiveText());
        String spanishInteractiveText = EMPTY;
        Collection<String> englishAnswers = getAnswers(item.getCore().getEn().getHtqSelectable().getInteractiveText());
        Collection<String> spanishAnswers = new ArrayList<>();

        Pair<String, String> promptContent = getPromptContent(itemExport, item);

        if (item.getTranslations() != null
                && item.getTranslations().getEsp() != null
                && item.getTranslations().getEsp().getHtqSelectable() != null) {
            spanishAnswers = getAnswers(item.getTranslations().getEsp().getHtqSelectable().getInteractiveText());
            spanishInteractiveText = translateSpanishContent(itemExport, item.getTranslations().getEsp().getHtqSelectable().getInteractiveText());
        }

        Map<String, Object> data = new HashMap<>();
        data.put("data", new HtqsExportData(item.getId(), promptContent.getFirst(), promptContent.getSecond(), AdditionalInfo.create(itemExport), itemExport.isIncludeRubrics(), englishAnswers, spanishAnswers, englishInteractiveText, spanishInteractiveText));

        return convertHtml(template, data, itemExport);
    }

    private Collection<String> getAnswers(String promptContent) {
        org.jsoup.nodes.Document doc = Jsoup.parse(promptContent);
        Elements htqCorrectAnswers = doc.select("span.iat-htq-correct");

        List<String> answers = new ArrayList<>();
        for (Element htqCorrect : htqCorrectAnswers) {
            answers.add(htqCorrect.text());
        }

        return answers;
    }

    private Pair<String, String> getPromptContent(ItemExport itemExport, HtqsItem item) {
        String englishContent = translateEnglishContent(itemExport, item.getCore().getEn().getPrompt());

        String spanishContent = StringUtils.EMPTY;
        if (item.getTranslations() != null && item.getTranslations().getEsp() != null) {
            spanishContent = translateSpanishContent(itemExport, item.getTranslations().getEsp().getPrompt());
        }

        return Pair.of(englishContent, spanishContent);
    }
}
