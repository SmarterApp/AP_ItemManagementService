package org.opentestsystem.ap.ims.service.export.writer;

import lombok.extern.slf4j.Slf4j;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Element;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.StimItem;
import org.opentestsystem.ap.ims.model.export.AdditionalInfo;
import org.opentestsystem.ap.ims.model.export.ExportItemData;
import org.opentestsystem.ap.ims.model.export.ItemExport;
import org.springframework.data.util.Pair;
import org.springframework.stereotype.Component;

import java.io.File;
import java.io.IOException;
import java.nio.file.Path;
import java.util.HashMap;
import java.util.Map;

@Slf4j
@Component
public class StimItemContentWriter extends PdfContentWriter implements ItemContentWriter {
    private static final String template = "stim-export";

    @Override
    public boolean supportsItemType(final Item item) {
        return item instanceof StimItem;
    }

    @Override
    public String getHtml(ItemExport itemExport) {
        StimItem stim = (StimItem) itemExport.getItem();

        Pair<String, String> promptContent = getContent(itemExport, stim);

        //Stimulus doesn't support rubrics
        ExportItemData exportData = new ExportItemData(stim.getId(), promptContent.getFirst(), promptContent.getSecond(), AdditionalInfo.create(itemExport), false);

        Map<String, Object> data = new HashMap<>();
        data.put("data", exportData);

        String html = convertHtml(template, data, itemExport);

        try {
            html = addAudioImagePlaceHolder(html, itemExport.getClonedItemDirectory());
        } catch (IOException e) {
            log.error("Failed to switch out audio files", e);
        }

        writeHtmlToFile(itemExport, html);

        return html;
    }

    private Pair<String, String> getContent(ItemExport itemExport, StimItem stimItem) {
        String englishContent = translateEnglishContent(itemExport, stimItem.getCore().getEn().getContent());
        String spanishContent = translateSpanishContent(itemExport, stimItem.getTranslations().getEsp().getContent());

        return Pair.of(englishContent, spanishContent);
    }

    private String addAudioImagePlaceHolder(String html, Path clonedItemDirectory) throws IOException {
        File newLocation = new File(clonedItemDirectory.toFile(), "audio-icon.png");

        org.jsoup.nodes.Document doc = Jsoup.parse(html);
        Elements audioElements = doc.select("audio");
        for (Element audioElement : audioElements) {
            Element audioImage = new Element(Tag.valueOf("img").getName());

            audioImage.attr("src", newLocation.toURI().toString());
            audioImage.attr("width", "48");
            audioImage.attr("height", "48");
            audioElement.replaceWith(audioImage);
        }

        return doc.html();
    }
}
