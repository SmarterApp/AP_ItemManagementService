package org.opentestsystem.ap.ims.service.export.writer;

import com.itextpdf.html2pdf.ConverterProperties;
import com.itextpdf.kernel.pdf.PdfWriter;
import com.itextpdf.layout.Document;
import lombok.extern.slf4j.Slf4j;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Element;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.StimItem;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.ims.model.export.AdditionalInfo;
import org.opentestsystem.ap.ims.model.export.ExportItemData;
import org.opentestsystem.ap.ims.model.export.ItemExport;
import org.python.apache.commons.compress.utils.IOUtils;
import org.springframework.core.io.ClassPathResource;
import org.springframework.stereotype.Component;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Path;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static java.util.stream.Collectors.groupingBy;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemLanguage.LANG_ESN;

@Slf4j
@Component
public class StimItemContentWriter extends PdfContentWriter implements ItemContentWriter {
    private static final String template = "stim-export";

    @Override
    public boolean supportsItemType(final Item item) {
        return item instanceof StimItem;
    }

    @Override
    public void addContent(final PdfWriter pdfWriter, final Document document, ConverterProperties properties, ItemExport itemExport) {
        StimItem stim = (StimItem) itemExport.getItem();
        String promptContent = getPromptContent(itemExport.getItemRelease());

        //Stimulus doesn't support rubrics
        ExportItemData exportData = new ExportItemData(stim.getId(), promptContent, AdditionalInfo.create(itemExport), false);

        Map<String, Object> data = new HashMap<>();
        data.put("data", exportData);

        String html = convertHtml(template, data);

        try {
            html = addAudioImagePlaceHolder(html, itemExport.getClonedItemDirectory());
        } catch (IOException e) {
            e.printStackTrace();
        }

        writeHtmlToFile(itemExport, html);

        addHtmlToPdf(document, properties, itemExport, html);
    }

    protected String getPromptContent(ItemRelease itemRelease) {
        Map<String, List<ItemRelease.Passage.Content>> contentLanguages = groupContentByLanguage(itemRelease);

        StringBuilder promptContent = new StringBuilder();

        if (!contentLanguages.get(LANG_ESN).isEmpty()) {
            for (ItemRelease.Passage.Content content : contentLanguages.get(LANG_ESN)) {
                promptContent.append(content.getStem());
            }
        } else {
            for (ItemRelease.Passage.Content content : contentLanguages.get(LANG_ESN)) {
                promptContent.append(content.getStem());
            }
        }

        return promptContent.toString();
    }

    private Map<String, List<ItemRelease.Passage.Content>> groupContentByLanguage(final ItemRelease itemRelease) {
        return itemRelease.getPassage()
                .getContent()
                .stream()
                .collect(groupingBy(ItemRelease.Passage.Content::getLanguage));
    }

    private String addAudioImagePlaceHolder(String html, Path clonedItemDirectory) throws IOException {
        File audioIcon = new ClassPathResource("static/images/audio-icon.jpg").getFile();

        File newLocation = new File(clonedItemDirectory.toFile(), audioIcon.getName());

        try (FileInputStream fis = new FileInputStream(audioIcon);
             FileOutputStream fos = new FileOutputStream(newLocation)) {
            IOUtils.copy(fis, fos);
        } catch (IOException ioe) {
//            throw new RuntimeException("Failed to move files");
            log.info("Couldn't find file ", ioe);
        }

        org.jsoup.nodes.Document doc = Jsoup.parse(html);
        Elements audioElements = doc.select("audio");
        for (Element audioElement : audioElements) {
            Element audioImage = new Element(Tag.valueOf("img").getName());

            audioImage.attr("src", newLocation.toURI().toString());
            audioImage.attr("width", "50");
            audioImage.attr("height", "50");
            audioElement.replaceWith(audioImage);
        }

        return doc.html();
    }
}
