/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestsystem.ap.ims.service;

import org.apache.commons.lang3.StringUtils;
import org.opentestsystem.ap.common.datastore.repository.WorkflowStatusRepository;
import org.opentestsystem.ap.common.exception.ValidationException;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ModelConstants;
import org.opentestsystem.ap.common.model.review.EducatorCommitteeFeedback;
import org.opentestsystem.ap.common.model.review.Feedback;
import org.opentestsystem.ap.ims.model.ItemChangeRequest;
import org.springframework.stereotype.Component;

import java.util.Objects;

import static java.lang.String.format;
import static org.opentestsystem.ap.common.model.ModelConstants.ItemReviewFeedback.ACCEPTED;
import static org.opentestsystem.ap.common.model.ModelConstants.ItemReviewFeedback.ACCEPTED_WITH_REVISIONS;
import static org.opentestsystem.ap.common.model.ModelConstants.ItemReviewFeedback.REJECTED;
import static org.opentestsystem.ap.common.model.ModelConstants.ItemReviewType.FACILITATOR;
import static org.opentestsystem.ap.common.model.ModelConstants.ItemReviewType.MEMBER;
import static org.opentestsystem.ap.ims.service.ValidatorMessages.FIELD_PATH_REQUIRED;
import static org.opentestsystem.ap.ims.service.ValidatorMessages.HISTORY_ID_REQUIRED;
import static org.opentestsystem.ap.ims.service.ValidatorMessages.ITEM_ID_MISMATCH;
import static org.opentestsystem.ap.ims.service.ValidatorMessages.ITEM_ID_REQUIRED;
import static org.opentestsystem.ap.ims.service.ValidatorMessages.ITEM_REQUIRED;
import static org.opentestsystem.ap.ims.service.ValidatorMessages.MESSAGE_REQUIRED;
import static org.opentestsystem.ap.ims.service.ValidatorMessages.NEW_VALUE_REQUIRED;
import static org.opentestsystem.ap.ims.service.ValidatorMessages.OLD_VALUE_REQUIRED;
import static org.opentestsystem.ap.ims.service.ValidatorMessages.REQUEST_REQUIRED;
import static org.opentestsystem.ap.ims.service.ValidatorMessages.REVIEW_FEEDBACK_INVALID;
import static org.opentestsystem.ap.ims.service.ValidatorMessages.REVIEW_FEEDBACK_REQUIRED;
import static org.opentestsystem.ap.ims.service.ValidatorMessages.REVIEW_TYPE_INVALID;
import static org.opentestsystem.ap.ims.service.ValidatorMessages.SECTION_REQUIRED;
import static org.opentestsystem.ap.ims.service.ValidatorMessages.TYPE_REQUIRED;
import static org.opentestsystem.ap.ims.service.ValidatorMessages.WORKFLOW_STATUS_INVALID;
import static org.opentestsystem.ap.ims.service.ValidatorMessages.WORKFLOW_STATUS_REQUIRED;

/**
 * Validator for items.
 */
@Component
public class ItemManagementValidator {

    private final WorkflowStatusRepository workflowStatusRepository;

    public ItemManagementValidator(WorkflowStatusRepository workflowStatusRepository) {
        this.workflowStatusRepository = workflowStatusRepository;
    }

    public void validateFindItem(final String itemId) {
        if (StringUtils.isBlank(itemId)) {
            throw new ValidationException(ITEM_ID_REQUIRED);
        }
    }

    public void validateFindItemHistory(final String itemId) {
        if (StringUtils.isBlank(itemId)) {
            throw new ValidationException(ITEM_ID_REQUIRED);
        }
    }

    public void validateFindItemDiff(final String itemId, final String historyId) {
        if (StringUtils.isBlank(itemId)) {
            throw new ValidationException(ITEM_ID_REQUIRED);
        }
        if (StringUtils.isBlank(historyId)) {
            throw new ValidationException(HISTORY_ID_REQUIRED);
        }
    }

    public void validateBeginCreateTransaction(final String itemType, final String commitMessage) {
        if (StringUtils.isBlank(itemType)) {
            throw new ValidationException(TYPE_REQUIRED);
        }
        if (StringUtils.isBlank(commitMessage)) {
            throw new ValidationException(MESSAGE_REQUIRED);
        }
    }

    public void validateBeginEditTransaction(final String itemId, final String section, final String message) {
        if (StringUtils.isBlank(itemId)) {
            throw new ValidationException(ITEM_ID_REQUIRED);
        }
        if (StringUtils.isBlank(section)) {
            throw new ValidationException(SECTION_REQUIRED);
        }
        if (StringUtils.isBlank(message)) {
            throw new ValidationException(MESSAGE_REQUIRED);
        }
    }

    public void validateSaveTransaction(final String itemId, final ItemChangeRequest request) {
        validateItemChange(itemId, request);
    }

    public void validateCommitTransaction(final String itemId, final ItemChangeRequest request) {
        validateItemChange(itemId, request);
    }

    public void validateCommitFieldChange(final String itemId,
                                          final String fieldPath,
                                          final ItemChangeRequest request) {
        validateFieldChange(itemId, fieldPath, request);
    }

    public void validateRollbackTransaction(final String itemId) {
        if (StringUtils.isBlank(itemId)) {
            throw new ValidationException(ITEM_ID_REQUIRED);
        }
    }

    // ------------------------------------------------------------------------

    /**
     * Common validation associated with saving and committing an item.
     *
     * @param itemId  The unique item identifier.
     * @param request The item.
     */
    private void validateItemChange(final String itemId, final ItemChangeRequest request) {
        if (StringUtils.isBlank(itemId)) {
            throw new ValidationException(ITEM_ID_REQUIRED);
        }
        if (request == null) {
            throw new ValidationException(REQUEST_REQUIRED);
        }
        if (request.getItem() == null) {
            throw new ValidationException(ITEM_REQUIRED);
        }
        if (StringUtils.isBlank(request.getMessage())) {
            throw new ValidationException(MESSAGE_REQUIRED);
        }

        final Item item = request.getItem();
        if (!itemId.equalsIgnoreCase(item.getId())) {
            throw new ValidationException(ITEM_ID_MISMATCH);
        }
        if (item.getCore() == null || StringUtils.isBlank(item.getWorkflow().getWorkflowStatusCode())) {
            throw new ValidationException(WORKFLOW_STATUS_REQUIRED);
        }
        if (workflowStatusRepository.findFirstByCode(item.getWorkflow().getWorkflowStatusCode()) == null) {
            throw new ValidationException(format(WORKFLOW_STATUS_INVALID, item.getWorkflow().getWorkflowStatusCode()));
        }
    }

    private void validateFieldChange(String itemId, String fieldPath, ItemChangeRequest request) {
        if (StringUtils.isBlank(itemId)) {
            throw new ValidationException(ITEM_ID_REQUIRED);
        }
        if (StringUtils.isBlank(fieldPath)) {
            throw new ValidationException(FIELD_PATH_REQUIRED);
        }
        if (Objects.isNull(request)) {
            throw new ValidationException(REQUEST_REQUIRED);
        }
        if (Objects.isNull(request.getOldValue())) {
            throw new ValidationException(OLD_VALUE_REQUIRED);
        }
        if (Objects.isNull(request.getNewValue())) {
            throw new ValidationException(NEW_VALUE_REQUIRED);
        }
        if (StringUtils.isBlank(request.getMessage())) {
            throw new ValidationException(MESSAGE_REQUIRED);
        }
    }

    // ------------------------------------------------------------------------

    public void valiateSaveDataReviewFeedback(String itemId, String type, Feedback feedback) {
        if (StringUtils.isBlank(itemId)) {
            throw new ValidationException(ITEM_ID_REQUIRED);
        }
        if (StringUtils.isNotBlank(type) && !StringUtils.equalsAnyIgnoreCase(type, FACILITATOR, MEMBER)) {
            throw new ValidationException(REVIEW_TYPE_INVALID);
        }
        this.valiateFeedback(feedback);
    }

    public void validateSaveEducatorCommitteeReviewFeedback(String itemId, String type, EducatorCommitteeFeedback feedback) {
        if (StringUtils.isBlank(itemId)) {
            throw new ValidationException(ITEM_ID_REQUIRED);
        }
        if (StringUtils.isNotBlank(type) && !StringUtils.equalsAnyIgnoreCase(type, FACILITATOR, MEMBER)) {
            throw new ValidationException(REVIEW_TYPE_INVALID);
        }
        if (Objects.isNull(feedback)) {
            throw new ValidationException(REVIEW_FEEDBACK_REQUIRED);
        }
        this.valiateFeedback(feedback.getFeedback());
        this.validateFeedback("Passes Content Quality Criteria", feedback.getPassesContentQualityCriteria());
        this.validateFeedback("Passes Bias and Sensitivity Quality Criteria", feedback.getPassesContentQualityCriteria());
        this.validateFeedback("Passes Accessibility Quality Criteria", feedback.getPassesContentQualityCriteria());
    }

    private void validateFeedback(String property, String passesYesNo) {
        if (StringUtils.isNotBlank(passesYesNo)
            && !StringUtils.equalsAnyIgnoreCase(passesYesNo, ModelConstants.TRUE, ModelConstants.FALSE)) {
            throw new ValidationException("'" + property + "' must be 'true', 'false', or blank");
        }
    }

    private void valiateFeedback(Feedback feedback) {
        if (Objects.isNull(feedback)) {
            throw new ValidationException(REVIEW_FEEDBACK_REQUIRED);
        }
        // blank feedback is allowed
        if (StringUtils.isNotBlank(feedback.getFeedback())
            && !StringUtils.equalsAny(feedback.getFeedback(), ACCEPTED, ACCEPTED_WITH_REVISIONS, REJECTED)) {
            throw new ValidationException(REVIEW_FEEDBACK_INVALID);
        }
    }
}
