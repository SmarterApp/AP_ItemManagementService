package org.opentestsystem.ap.ims.service;

import lombok.extern.slf4j.Slf4j;
import org.opentestsystem.ap.common.util.SecurityUtil;
import org.opentestsystem.ap.ims.entity.SavedSearch;
import org.opentestsystem.ap.ims.entity.SavedSearch.SavedSearchIdentity;
import org.opentestsystem.ap.ims.entity.SharedSavedSearch;
import org.opentestsystem.ap.ims.model.SavedSearchModel;
import org.opentestsystem.ap.ims.repository.SavedSearchRepository;
import org.opentestsystem.ap.ims.repository.SharedSavedSearchRepository;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.function.Function;
import java.util.stream.Collectors;

@Slf4j
@Service
public class SavedSearchService {

    private final SavedSearchRepository savedSearchRepository;

    private final SharedSavedSearchRepository sharedSavedSearchRepository;

    private final SecurityUtil securityUtil;

    public SavedSearchService(final SavedSearchRepository savedSearchRepository,
                              final SharedSavedSearchRepository sharedSavedSearchRepository,
                              final SecurityUtil securityUtil) {
        this.savedSearchRepository = savedSearchRepository;
        this.sharedSavedSearchRepository = sharedSavedSearchRepository;
        this.securityUtil = securityUtil;
    }

    // ------------------------------------------------------------------------
    // Saved Search Public Methods
    // ------------------------------------------------------------------------

    public void createSavedSearch(final SavedSearchModel.SaveSearchRequest model) {
        log.debug("create saved search '{}' for {}", model.getSearchName(), userName());
        SavedSearch savedSearch = new SavedSearch(newIdentity(model.getSearchName()), model.getSearchJson());
        savedSearchRepository.save(savedSearch);
    }

    @Transactional(readOnly = true)
    public List<SavedSearchModel.SavedSearchResponse> findSavedSearches() {
        log.debug("find saved searches for {}", userName());
        final List<SavedSearch> results = savedSearchRepository.findByIdUserName(userName(), orderBySearchName());
        return results.stream().map(toSavedSearchModel).collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public List<SavedSearchModel.SavedSearchResponse> findSavedSearchesBySharedWithUserName() {
        log.debug("find saved searches for {}", userName());
        final List<SavedSearch> results = savedSearchRepository.findBySharedSavedSearchesIdSharedWithUserName(
            userName(), orderBySearchName());
        return results.stream().map(toSavedSearchModel).collect(Collectors.toList());
    }

    public void deleteMySavedSearch(String searchName) {
        log.debug("delete saved search '{}' for {}", searchName, userName());
        savedSearchRepository.delete(newIdentity(searchName));
    }

    // ------------------------------------------------------------------------
    // Shared Saved Search Public Methods
    // ------------------------------------------------------------------------

    public void shareSavedSearch(SavedSearchModel.SharedSearchRequest model) {
        log.debug("share my saved search '{}' with {}", model.getSearchName(), model.getSharedWithUserName());
        sharedSavedSearchRepository.save(
            new SharedSavedSearch(userName(), model.getSearchName(), model.getSharedWithUserName()));
    }

    @Transactional(readOnly = true)
    public List<SavedSearchModel.SharedSavedSearchResponse> findSharedSavedSearches(final String searchName) {
        log.debug("find who {} has shared saved search '{}' with", userName(), searchName);
        final List<SharedSavedSearch> results = sharedSavedSearchRepository.findByIdOwnerUserNameAndIdSearchName(
            userName(), searchName, orderBySharedWithUserName());
        return results.stream().map(toSharedSavedSearchModel).collect(Collectors.toList());
    }

    public void unshareSavedSearch(SavedSearchModel.UnShareSearchRequest model) {
        log.debug("un-share saved search '{}' owned by {} with {}",
            model.getSearchName(), model.getOwnerUserName(), model.getSharedWithUserName());
        sharedSavedSearchRepository.delete(
            new SharedSavedSearch(model.getOwnerUserName(), model.getSearchName(), model.getSharedWithUserName()));
    }

    // ------------------------------------------------------------------------
    // Helper Methods
    // ------------------------------------------------------------------------

    private Function<SavedSearch, SavedSearchModel.SavedSearchResponse> toSavedSearchModel = entity ->
        new SavedSearchModel.SavedSearchResponse(
            entity.getId().getUserName(),
            entity.getId().getSearchName(),
            entity.getSearchJson());

    private Function<SharedSavedSearch, SavedSearchModel.SharedSavedSearchResponse> toSharedSavedSearchModel =
        entity -> new SavedSearchModel.SharedSavedSearchResponse(
            entity.getId().getOwnerUserName(),
            entity.getId().getSearchName(),
            entity.getId().getSharedWithUserName());

    private SavedSearchIdentity newIdentity(final String searchName) {
        return new SavedSearchIdentity(userName(), searchName);
    }

    private Sort orderBySearchName() {
        return new Sort(Sort.Direction.ASC, "id.searchName");
    }

    private Sort orderBySharedWithUserName() {
        return new Sort(Sort.Direction.ASC, "id.sharedWithUserName");
    }


    private String userName() {
        return securityUtil.getUsername();
    }
}
