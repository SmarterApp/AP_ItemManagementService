package org.opentestsystem.ap.ims.service;

import com.google.common.annotations.VisibleForTesting;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.opentestsystem.ap.common.util.SecurityUtil;
import org.opentestsystem.ap.ims.entity.SavedSearch;
import org.opentestsystem.ap.ims.entity.SavedSearch.SavedSearchIdentity;
import org.opentestsystem.ap.ims.model.SavedSearchModel;
import org.opentestsystem.ap.ims.repository.SavedSearchRepository;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.function.Function;
import java.util.stream.Collectors;

import static java.util.Collections.emptyList;
import static java.util.stream.Collectors.toList;
import static org.apache.commons.collections4.CollectionUtils.isNotEmpty;
import static org.apache.commons.lang3.StringUtils.isNotBlank;
import static org.apache.commons.lang3.StringUtils.split;

@Slf4j
@Service
public class SavedSearchService {

    private final SavedSearchRepository savedSearchRepository;

    public SavedSearchService(final SavedSearchRepository savedSearchRepository) {
        this.savedSearchRepository = savedSearchRepository;
    }

    // ------------------------------------------------------------------------
    // Saved Search Public Methods
    // ------------------------------------------------------------------------

    public void saveSavedSearch(final SavedSearchModel.SaveSearchRequest model) {
        log.debug("create saved search '{}' for {}", model.getSearchName(), model.getUserName());
        final List<String> userNames = parseValues(model.getUserName());
        if (isNotEmpty(userNames)) {
            userNames.forEach(userName -> {
                final SavedSearch savedSearch = new SavedSearch(
                    newIdentity(userName, model.getSearchName()),
                    model.getSearchJson()
                );
                savedSearchRepository.save(savedSearch);
            });
        }
    }

    @Transactional(readOnly = true)
    public List<SavedSearchModel.SavedSearchResponse> findSavedSearches(final String userName) {
        log.debug("find saved searches for {}", userName);
        final List<SavedSearch> results = savedSearchRepository.findByIdUserName(userName, orderBySearchName());
        return results.stream().map(toSavedSearchModel).collect(toList());
    }

    public void deleteSavedSearch(final String userName, final String searchName) {
        log.debug("delete saved search '{}' for {}", searchName, userName);
        final SavedSearchIdentity id = newIdentity(userName, searchName);
        final SavedSearch savedSearch = savedSearchRepository.findOne(id);
        if (Objects.nonNull(savedSearch)) {
            savedSearchRepository.delete(savedSearch);
        }
    }

    // ------------------------------------------------------------------------
    // Helper Methods
    // ------------------------------------------------------------------------

    @VisibleForTesting
    List<String> parseValues(final String value) {
        List<String> list = emptyList();
        if (isNotBlank(value)) {
            list = Arrays.asList(split(value, ","))
                .stream()
                .map(String::trim)
                .filter(StringUtils::isNotBlank)
                .collect(toList());
        }
        return list;
    }

    private Function<SavedSearch, SavedSearchModel.SavedSearchResponse> toSavedSearchModel = entity ->
        new SavedSearchModel.SavedSearchResponse(
            entity.getId().getUserName(),
            entity.getId().getSearchName(),
            entity.getSearchJson());

    private SavedSearchIdentity newIdentity(final SavedSearchModel.SaveSearchRequest model) {
        return newIdentity(model.getUserName(), model.getSearchName());
    }

    private SavedSearchIdentity newIdentity(final String userName, final String searchName) {
        return new SavedSearchIdentity(userName, searchName);
    }

    private Sort orderBySearchName() {
        return new Sort(Sort.Direction.ASC, "id.searchName");
    }
}
