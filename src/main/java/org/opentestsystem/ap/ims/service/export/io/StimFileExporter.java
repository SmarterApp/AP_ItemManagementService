package org.opentestsystem.ap.ims.service.export.io;

import org.opentestsystem.ap.common.model.Attachment;
import org.opentestsystem.ap.common.model.ItemAudioResource;
import org.opentestsystem.ap.common.model.StimItem;
import org.opentestsystem.ap.ims.model.export.ItemExport;
import org.springframework.stereotype.Component;

import java.io.File;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

@Component
public class StimFileExporter implements ItemFileExporter {
    @Override
    public boolean handlesItem(final ItemExport itemExport) {
        return itemExport.getItem() instanceof StimItem;
    }

    @Override
    public List<Path> findAssociatedFilesForExport(final ItemExport itemExport) {
        StimItem stimItem = (StimItem) itemExport.getItem();

        if (stimItem.getAudio() == null || stimItem.getAudio().getAudioResources().isEmpty()) {
            return Collections.emptyList();
        }

        Set<String> audioFiles = new HashSet<>();
        for (ItemAudioResource resource : stimItem.getAudio().getAudioResources()) {
            if (resource.getTranscriptFile() != null) {
                audioFiles.add(resource.getTranscriptFile().getFileName());
            }

            audioFiles.addAll(resource.getProductionFiles()
                    .stream()
                    .map(Attachment::getFileName)
                    .collect(Collectors.toList())
            );
        }

        File[] clonedFiles = itemExport.getClonedItemDirectory().toFile().listFiles();
        List<Path> audioFilesToExport = new ArrayList<>();
        for (File file : clonedFiles) {
            if (file.isDirectory()) {
                continue;
            }

            if (audioFiles.contains(file.getName())) {
                audioFilesToExport.add(file.toPath());
            }
        }

        return audioFilesToExport;
    }
}
