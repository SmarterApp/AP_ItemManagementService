package org.opentestsystem.ap.ims.service;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Font;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.pdf.PdfWriter;
import lombok.extern.slf4j.Slf4j;
import org.opentestsystem.ap.common.exception.ValidationException;
import org.opentestsystem.ap.common.model.ItemResponse;
import org.springframework.stereotype.Service;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.FileVisitResult;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.SimpleFileVisitor;
import java.nio.file.attribute.BasicFileAttributes;
import java.util.Optional;
import java.util.UUID;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.TYPE_TUT;

@Slf4j
@Service
public class ItemExportServiceImpl implements ItemExportService {
    private final ItemService itemService;

    public ItemExportServiceImpl(final ItemService itemService) {
        this.itemService = itemService;
    }

    @Override
    public Optional<File> exportItem(final String itemId) {
        final ItemResponse itemResponse = itemService.findItem(itemId);

        if (itemResponse.getItem() == null) {
            return Optional.empty();
        } else if (itemResponse.getItem().getType().equals(TYPE_TUT)) {
            throw new ValidationException(TYPE_TUT + " type is not supported");
        }

        try {
            Path path = Files.createTempDirectory(UUID.randomUUID().toString());

            File itemFiles = new File(path.toFile(), "itemFiles");
            itemFiles.mkdir();
            File zipFile = new File(path.toFile(),itemId + ".zip");

            createPdf(itemFiles, itemResponse);
            pack(Paths.get(itemFiles.toURI()), Paths.get(zipFile.toURI()));

            return Optional.of(zipFile);
        } catch (IOException ioe) {
            throw new RuntimeException("Unhandled Exception when exporting item", ioe);
        }
    }

    private void createPdf(File directory, ItemResponse itemResponse) throws IOException {
        final String pdfName = itemResponse.getItem().getId() + ".pdf";
        File pdfFile = new File(directory, pdfName);
        pdfFile.createNewFile();

        try (FileOutputStream fos = new FileOutputStream(pdfFile)) {

            Document document = new Document();
            PdfWriter.getInstance(document, fos);

            document.open();
            Font font = FontFactory.getFont(FontFactory.COURIER, 16, BaseColor.BLACK);
            Chunk chunk = new Chunk("Hello World", font);

            document.add(chunk);
            document.close();
        } catch (DocumentException | IOException e) {
            throw new RuntimeException("Unexpected issue creating the pdf", e);
        }
    }

    private static void pack(final Path folder, final Path zipFilePath) throws IOException {
        try (
                FileOutputStream fos = new FileOutputStream(zipFilePath.toFile());
                ZipOutputStream zos = new ZipOutputStream(fos)
        ) {
            Files.walkFileTree(folder, new SimpleFileVisitor<Path>() {
                public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {
                    zos.putNextEntry(new ZipEntry(folder.relativize(file).toString()));
                    Files.copy(file, zos);
                    zos.closeEntry();
                    return FileVisitResult.CONTINUE;
                }

                public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {
                    zos.putNextEntry(new ZipEntry(folder.relativize(dir).toString() + "/"));
                    zos.closeEntry();
                    return FileVisitResult.CONTINUE;
                }
            });
        }
    }
}
