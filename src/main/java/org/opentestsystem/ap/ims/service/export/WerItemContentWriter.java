package org.opentestsystem.ap.ims.service.export;

import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.tool.xml.ElementList;
import com.itextpdf.tool.xml.XMLWorker;
import com.itextpdf.tool.xml.XMLWorkerHelper;
import com.itextpdf.tool.xml.html.Tags;
import com.itextpdf.tool.xml.parser.XMLParser;
import com.itextpdf.tool.xml.pipeline.css.CSSResolver;
import com.itextpdf.tool.xml.pipeline.css.CssResolverPipeline;
import com.itextpdf.tool.xml.pipeline.end.PdfWriterPipeline;
import com.itextpdf.tool.xml.pipeline.html.HtmlPipeline;
import com.itextpdf.tool.xml.pipeline.html.HtmlPipelineContext;
import org.apache.commons.lang.StringUtils;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.WerItem;
import org.springframework.stereotype.Component;

import java.io.ByteArrayInputStream;
import java.io.FileInputStream;
import java.io.IOException;

@Component
public class WerItemContentWriter implements ItemContentWriter {
    @Override
    public boolean supportsItemType(final Item item) {
        return item instanceof WerItem;
    }

    @Override
    public void addContent(final Item item, final PdfWriter pdfWriter, final Document document) {
        WerItem werItem = (WerItem) item;
        PdfPTable table = new PdfPTable(1);
        PdfPCell cell = new PdfPCell();
        try {
            ElementList list = XMLWorkerHelper.parseToElementList(werItem.getCore().getEn().getPrompt(), null);
            for (Element element : list) {
                cell.addElement(element);
            }
            table.addCell(cell);
//            document.add(table);
//        } catch (IOException | DocumentException e) {
        } catch (IOException ioe) {
            throw new RuntimeException("Unexpected issue adding content");
        }

        // CSS
        CSSResolver cssResolver =
                XMLWorkerHelper.getInstance().getDefaultCssResolver(true);

        // HTML
        HtmlPipelineContext htmlContext = new HtmlPipelineContext(null);
        htmlContext.setTagFactory(Tags.getHtmlTagProcessorFactory());
//        htmlContext.setImageProvider(new Base64ImageProvider());

        // Pipelines
//        PdfWriterPipeline pdf = new PdfWriterPipeline(document, pdfWriter);
//        HtmlPipeline html = new HtmlPipeline(htmlContext, pdf);
//        CssResolverPipeline css = new CssResolverPipeline(cssResolver, html);

        // XML Worker
//        XMLWorker worker = new XMLWorker(css, true);
//        XMLParser p = new XMLParser(worker);
        try {
//            p.parse(new ByteArrayInputStream(werItem.getCore().getEn().getPrompt().getBytes()));

            String html = StringUtils.strip(werItem.getCore().getEn().getPrompt(),"\\");

            XMLWorkerHelper.getInstance().parseXHtml(pdfWriter, document,
                    new ByteArrayInputStream(html.getBytes()));
        } catch (IOException e) {
            e.printStackTrace();
        }


    }
}
