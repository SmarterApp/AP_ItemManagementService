package org.opentestsystem.ap.ims.service.export.writer;

import lombok.extern.slf4j.Slf4j;
import org.apache.commons.io.IOUtils;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import org.opentestsystem.ap.common.model.ItemConstants;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.common.saaif.transformer.SaaifMapper;
import org.opentestsystem.ap.ims.model.export.ItemExport;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ClassPathResource;
import org.thymeleaf.TemplateEngine;
import org.thymeleaf.context.Context;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Path;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import static java.util.stream.Collectors.groupingBy;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemLanguage.LANG_ESN;

@Slf4j
public abstract class PdfContentWriter {
    @Autowired
    private TemplateEngine templateEngine;

    protected String getPromptContent(ItemRelease itemRelease) {
        Map<String, List<ItemRelease.Item.Content>> contentLanguages = groupItemContentByLanguage(itemRelease);

        StringBuilder promptContent = new StringBuilder();

        if (!contentLanguages.get(LANG_ESN).isEmpty()) {
            for (ItemRelease.Item.Content content : contentLanguages.get(LANG_ESN)) {
                promptContent.append(content.getStem());
            }
        } else {
            for (ItemRelease.Item.Content content : contentLanguages.get(LANG_ESN)) {
                promptContent.append(content.getStem());
            }
        }

        return promptContent.toString();
    }

    protected String convertHtml(String templateName, Map<String, ? extends Object> data, ItemExport itemExport) {


        Context ctx = new Context();
        if (data != null) {
            for (final Object o : data.entrySet()) {
                Map.Entry pair = (Map.Entry) o;
                ctx.setVariable(pair.getKey().toString(), pair.getValue());
            }
        }

        String html = templateEngine.process(templateName, ctx);
        //Thymeleaf requires a Servlet Context to handle relative directory references.  Instead we put the file within
        //the same directory as the generated HTML
        moveCssFile(itemExport.getClonedItemDirectory());

        //The PDF doesn't handle SVG so need to convert SVG to PNG's
        return convertSvgToPng(html, itemExport.getClonedItemDirectory());
    }

    private String convertSvgToPng(String html, Path clonedItemDirectory) {
        org.jsoup.nodes.Document doc = Jsoup.parse(html);
        Elements svgImages = doc.select("img[src$=.svg]");
        for (Element image : svgImages) {
            String src = image.attr("src");
            String height = image.attr("height");
            String width = image.attr("width");
            ImageUtil.createImageFromSVG(clonedItemDirectory.toFile(), new File(clonedItemDirectory.toFile(), src), Float.valueOf(width), Float.valueOf(height));

            image.attr("src", src.replace(".svg", ".png"));
        }

        return doc.html();
    }

    protected List<String> translateContents(final ItemExport itemExport, final String languageCode, final List<String> contents) {
        SaaifMapper mapper = new SaaifMapper(languageCode);
        return contents.stream()
                .map(s -> mapper.mapRichTextContent(itemExport.getItem(), languageCode, s, itemExport.getItemContext()).getMappedText())
                .collect(Collectors.toList());
    }

    protected String translateEnglishContent(final ItemExport itemExport, final String content) {
        return translateContent(itemExport, ItemConstants.ItemLanguage.LANG_ENU, content);
    }

    protected String translateSpanishContent(final ItemExport itemExport, final String content) {
        return translateContent(itemExport, ItemConstants.ItemLanguage.LANG_ESN, content);
    }

    //TODO - REmove before final commit
    protected void writeHtmlToFile(final ItemExport itemExport, final String html) {
        File htmlFile = new File(itemExport.getClonedItemDirectory().toFile(), itemExport.getItem().getId() + ".html");
        try (FileOutputStream fos = new FileOutputStream(htmlFile)) {
            htmlFile.createNewFile();
            IOUtils.write(html.getBytes(), fos);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private String translateContent(final ItemExport itemExport, final String languageCode, final String content) {
        SaaifMapper mapper = new SaaifMapper(languageCode);
        return mapper.mapRichTextContent(itemExport.getItem(), languageCode, content, itemExport.getItemContext()).getMappedText();
    }

    private void moveCssFile(Path clonedItemDirectory) {
        try {
            File css = new ClassPathResource("static/css/styles.css").getFile();
            File cssItemLocation = new File(clonedItemDirectory.toFile(), css.getName());
            try (FileInputStream fis = new FileInputStream(css);
                 FileOutputStream fos = new FileOutputStream(cssItemLocation)) {
                IOUtils.copy(fis, fos);
            } catch (IOException ioe) {
                throw new RuntimeException("Failed to move files");
            }
        } catch (IOException e) {
            throw new RuntimeException("Issue moving css file");
        }
    }

    protected Map<String, List<ItemRelease.Item.Content>> groupItemContentByLanguage(final ItemRelease itemRelease) {
        return itemRelease.getItem()
                .getContent()
                .stream()
                .collect(groupingBy(ItemRelease.Item.Content::getLanguage));
    }
}
