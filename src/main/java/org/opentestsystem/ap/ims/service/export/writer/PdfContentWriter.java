package org.opentestsystem.ap.ims.service.export.writer;

import lombok.extern.slf4j.Slf4j;
import org.apache.commons.io.IOUtils;
import org.apache.commons.lang3.StringUtils;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import org.opentestsystem.ap.common.model.ItemConstants;
import org.opentestsystem.ap.common.saaif.transformer.SaaifMapper;
import org.opentestsystem.ap.ims.model.export.ItemExport;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ClassPathResource;
import org.thymeleaf.TemplateEngine;
import org.thymeleaf.context.Context;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Path;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@Slf4j
public abstract class PdfContentWriter {
    @Autowired
    private TemplateEngine templateEngine;

    protected String convertHtml(String templateName, Map<String, ? extends Object> data, ItemExport itemExport) {
        Context ctx = new Context();
        if (data != null) {
            for (final Object o : data.entrySet()) {
                Map.Entry pair = (Map.Entry) o;
                ctx.setVariable(pair.getKey().toString(), pair.getValue());
            }
        }

        ctx.setVariable("baseDirectoryUrl", itemExport.getClonedItemDirectory().toUri().toString());

        String html = templateEngine.process(templateName, ctx);
        //Thymeleaf requires a Servlet Context to handle relative directory references.  Instead we put the file within
        //the same directory as the generated HTML
        moveCssFile(itemExport.getClonedItemDirectory());

        //The PDF doesn't handle SVG so need to convert SVG to PNG's
        return convertSvgToPng(html, itemExport.getClonedItemDirectory());
    }

    private String convertSvgToPng(String html, Path clonedItemDirectory) {
        org.jsoup.nodes.Document doc = Jsoup.parse(html);
        Elements svgImages = doc.select("img[src$=.svg]");
        for (Element image : svgImages) {
            String src = image.attr("src");
            String height = image.attr("height");
            String width = image.attr("width");
            ImageUtil.createImageFromSVG(clonedItemDirectory.toFile(), new File(clonedItemDirectory.toFile(), src), Float.valueOf(width), Float.valueOf(height));

            image.attr("src", src.replace(".svg", ".png"));
        }

        return doc.html();
    }

    protected List<String> translateContents(final ItemExport itemExport, final String languageCode, final List<String> contents) {
        SaaifMapper mapper = new SaaifMapper(languageCode);
        return contents.stream()
                .map(s -> {
                    String richText = mapper.mapRichTextContent(itemExport.getItem(), languageCode, s, itemExport.getItemContext()).getMappedText();
                    return removeTableStyles(richText);
                })

                .collect(Collectors.toList());
    }

    private String removeTableStyles(String html) {
        org.jsoup.nodes.Document doc = Jsoup.parse(html);
        Elements tables = doc.select("table");
        for (Element image : tables) {
            image.attr("style", "");
        }

        return doc.html();
    }

    protected String translateEnglishContent(final ItemExport itemExport, final String content) {
        List<String> contents = translateContents(itemExport, ItemConstants.ItemLanguage.LANG_ESN, Collections.singletonList(content));

        return contents.isEmpty() ? StringUtils.EMPTY : contents.get(0);
    }

    protected String translateSpanishContent(final ItemExport itemExport, final String content) {
        List<String> contents = translateContents(itemExport, ItemConstants.ItemLanguage.LANG_ESN, Collections.singletonList(content));

        return contents.isEmpty() ? StringUtils.EMPTY : contents.get(0);
    }

    private void moveCssFile(Path clonedItemDirectory) {
        ClassPathResource css = new ClassPathResource("static/css/styles.css");
        File cssItemLocation = new File(clonedItemDirectory.toFile(), "styles.css");
        try (InputStream ios = css.getInputStream();
             FileOutputStream fos = new FileOutputStream(cssItemLocation)) {
            IOUtils.copy(ios, fos);
        } catch (IOException ioe) {
            throw new RuntimeException("Failed to move files", ioe);
        }
    }
}
