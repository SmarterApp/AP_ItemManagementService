package org.opentestsystem.ap.ims.service.export.writer;

import com.itextpdf.html2pdf.ConverterProperties;
import com.itextpdf.html2pdf.HtmlConverter;
import com.itextpdf.layout.Document;
import com.itextpdf.layout.element.IBlockElement;
import com.itextpdf.layout.element.IElement;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.springframework.beans.factory.annotation.Autowired;
import org.thymeleaf.TemplateEngine;
import org.thymeleaf.context.Context;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.nio.file.Path;
import java.util.List;
import java.util.Map;

import static java.util.stream.Collectors.groupingBy;

public abstract class PdfContentWriter {
    protected static final String englishCode = "ENU";
    protected static final String spanishCode = "ESN";

    @Autowired
    private TemplateEngine templateEngine;

    //TODO - Remove once all others are working
    protected void addPromptToDocument(Document document, Map<String, List<ItemRelease.Item.Content>> contentLanguages, ConverterProperties properties) {
        for (ItemRelease.Item.Content content : contentLanguages.get(englishCode)) {
            addHtmlToPdf(document, properties, content.getStem());
        }
    }

    protected void addHtmlToPdf(final Document document, final ConverterProperties properties, String html) {
        try {
            String prunedHTML = replaceSvgWithPngImages(html);
            List<IElement> elements = HtmlConverter.convertToElements(new ByteArrayInputStream(prunedHTML.getBytes()), properties);

            for (IElement element : elements) {
                document.add((IBlockElement) element);
            }
        } catch (IOException e) {
            throw new RuntimeException("Error encountered when converting content to PDF", e);
        }
    }

    protected Map<String, List<ItemRelease.Item.Content>> groupItemContentByLanguage(final ItemRelease itemRelease) {
        return itemRelease.getItem()
                .getContent()
                .stream()
                .collect(groupingBy(ItemRelease.Item.Content::getLanguage));
    }

    protected String convertHtml(String templateName, Map<String, ? extends Object> data) {
        Context ctx = new Context();
        if (data != null) {
            for (final Object o : data.entrySet()) {
                Map.Entry pair = (Map.Entry) o;
                ctx.setVariable(pair.getKey().toString(), pair.getValue());
            }
        }

        return templateEngine.process(templateName, ctx);
    }

    private String replaceSvgWithPngImages(String html) {
        return html.replace(".svg", ".png");
    }

    protected String convertSvgToPng(String html, Path clonedItemDirectory) {
        org.jsoup.nodes.Document doc = Jsoup.parse(html);
        Elements newsHeadlines = doc.select("img[src$=.svg]");
        for (Element headline : newsHeadlines) {
            String src = headline.attr("src");
            String height = headline.attr("height");
            String width = headline.attr("width");
            ImageUtil.createImageFromSVG(clonedItemDirectory.toFile(), new File(clonedItemDirectory.toFile(), src), Float.valueOf(width), Float.valueOf(height));
        }

        return doc.html();
    }
}
