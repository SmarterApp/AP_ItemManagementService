package org.opentestsystem.ap.ims.service.export.writer;

import com.itextpdf.html2pdf.ConverterProperties;
import com.itextpdf.html2pdf.HtmlConverter;
import com.itextpdf.layout.Document;
import com.itextpdf.layout.element.IBlockElement;
import com.itextpdf.layout.element.IElement;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.springframework.beans.factory.annotation.Autowired;
import org.thymeleaf.TemplateEngine;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import org.thymeleaf.context.Context;
import static java.util.stream.Collectors.groupingBy;

public abstract class PdfContentWriter {
    protected static final String englishCode = "ENU";
    protected static final String spanishCode = "ESN";

    @Autowired
    private TemplateEngine templateEngine;

    protected void addPromptToDocument(Document document, Map<String, List<ItemRelease.Item.Content>> contentLanguages, ConverterProperties properties) {
        for(ItemRelease.Item.Content content : contentLanguages.get(englishCode)) {
            addHtmlToPdf(document, properties, content.getStem());
        }
    }

    protected void addHtmlToPdf(final Document document, final ConverterProperties properties, String html) {
        try {
            List<IElement> elements = HtmlConverter.convertToElements(new ByteArrayInputStream(html.getBytes()), properties);

            for (IElement element : elements) {
                document.add((IBlockElement) element);
            }
        } catch (IOException e) {
            throw new RuntimeException("Error encountered when converting content to PDF", e);
        }
    }

    protected Map<String, List<ItemRelease.Item.Content>> groupItemContentByLanguage(final ItemRelease itemRelease) {
        return itemRelease.getItem()
                .getContent()
                .stream()
                .collect(groupingBy(ItemRelease.Item.Content::getLanguage));
    }

    protected String convertHtml(String templateName, Map<String, ? extends Object> data) {
        Context ctx = new Context();
        if (data != null) {
            for (final Object o : data.entrySet()) {
                Map.Entry pair = (Map.Entry) o;
                ctx.setVariable(pair.getKey().toString(), pair.getValue());
            }
        }

        String processedHtml = templateEngine.process(templateName, ctx);
        return processedHtml;
    }
}
