package org.opentestsystem.ap.ims.service.export.writer;

import com.google.common.collect.Streams;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.SaItem;
import org.opentestsystem.ap.common.model.content.SaItemContent;
import org.opentestsystem.ap.ims.model.export.AdditionalInfo;
import org.opentestsystem.ap.ims.model.export.ExemplarRubric;
import org.opentestsystem.ap.ims.model.export.ItemExport;
import org.opentestsystem.ap.ims.model.export.SaExportData;
import org.springframework.stereotype.Component;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@Component
public class SaItemContentWriter extends PdfContentWriter implements ItemContentWriter {
    private static final String template = "sa-export";

    @Override
    public boolean supportsItemType(final Item item) {
        return item instanceof SaItem;
    }

    @Override
    public String getHtml(final ItemExport itemExport) {
        Map<String, Object> data = new HashMap<>();
        data.put("data", createItemExportData(itemExport));

        String html = convertHtml(template, data, itemExport);

        writeHtmlToFile(itemExport, html);

        return html;
    }

    private SaExportData createItemExportData(ItemExport itemExport) {
        SaItem item = (SaItem) itemExport.getItem();
        String promptContent = getPromptContent(itemExport.getItemRelease());
        AdditionalInfo additionalInfo = AdditionalInfo.create(itemExport);

        if (itemExport.isIncludeRubrics()) {
            List<ExemplarRubric> spanishExemplarsRubrics = new ArrayList<>();

            if (item.getTranslations() != null && item.getTranslations().getEsp() != null) {
                SaItemContent spanishContent = item.getTranslations().getEsp();

                spanishExemplarsRubrics = Streams.zip(spanishContent.getExemplarResponses().stream(), spanishContent.getRubrics().stream(), (exemplar, rubric) ->
                        new ExemplarRubric(translateSpanishContent(itemExport, exemplar), translateSpanishContent(itemExport, rubric)))
                        .collect(Collectors.toList());
            }

            SaItemContent englishContent = item.getCore().getEn();
            List<ExemplarRubric> englishExemplarsRubrics = Streams.zip(englishContent.getExemplarResponses().stream(), englishContent.getRubrics().stream(), (exemplar, rubric) ->
                    new ExemplarRubric(translateEnglishContent(itemExport, exemplar), translateEnglishContent(itemExport, rubric)))
                    .collect(Collectors.toList());

            return new SaExportData(item.getId(), promptContent, additionalInfo, true, englishExemplarsRubrics, spanishExemplarsRubrics);
        }

        return new SaExportData(item.getId(), promptContent, additionalInfo, itemExport.isIncludeRubrics());
    }
}
