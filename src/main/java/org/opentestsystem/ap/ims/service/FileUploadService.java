/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestsystem.ap.ims.service;

import lombok.extern.slf4j.Slf4j;
import org.opentestsystem.ap.common.model.AttachmentRequest;
import org.opentestsystem.ap.common.model.ItemBankUser;
import org.opentestsystem.ap.common.model.ModelUtil;
import org.opentestsystem.ap.common.repository.ItemRepository;
import org.opentestsystem.ap.common.util.SecurityUtil;
import org.opentestsystem.ap.ims.model.UploadFile;
import org.springframework.stereotype.Component;
import org.springframework.web.multipart.MultipartFile;

import static org.opentestsystem.ap.common.model.ItemConstants.AttachmentType.GENERAL_ATTACHMENTS;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.TYPE_GI;
import static org.opentestsystem.ap.common.model.ItemConstants.Section.SECTION_CORE;
import static org.opentestsystem.ap.common.model.ItemConstants.Section.SECTION_GLOSSARY;
import static org.opentestsystem.ap.common.model.ModelUtil.ATTACHMENT_LANGUAGE;

/**
 * Handles file requests like uploading, downloading, and retrieving item files.
 */
@Slf4j
@Component
public class FileUploadService {

    private static final String BULK_PREVIEW_FILE_DELIMITER = ",";

    private final FileUploadServiceValidator validator;

    private final ItemRepository itemRepository;

    private final SecurityUtil securityUtil;

    public FileUploadService(final FileUploadServiceValidator validator, final ItemRepository itemRepository,
                             final SecurityUtil securityUtil) {
        this.validator = validator;
        this.itemRepository = itemRepository;
        this.securityUtil = securityUtil;
    }

    /**
     * Validates and processes the file upload request.
     *
     * @param uploadFile The upload request holding information like item ID, transaction ID, and the file(s).
     */
    public void attachFile(final UploadFile uploadFile) {
        validator.validateUploadedFile(uploadFile);

        final String itemId = uploadFile.getItemId();
        final MultipartFile file = uploadFile.getFile();

        log.debug("Uploading file for item {}", itemId);

        final AttachmentRequest attachmentRequest = newAttachmentRequest(uploadFile);

        if (SECTION_GLOSSARY.equalsIgnoreCase(uploadFile.getSection())) {
            attachmentRequest.setFileName(getGlossaryFileName(attachmentRequest));
        }

        final ItemBankUser user = securityUtil.getItemBankUser();
        itemRepository.saveAttachment(user, itemId, attachmentRequest, file);
    }

    /**
     * Reads an uploaded text file. Replaces carriage returns with comma delimiter
     *
     * @param uploadFile
     * @return comma delimited string
     */
    // TODO: IAT-1772 - Remove after item search dashboard implemented
    public String convertBulkPreviewFile(final UploadFile uploadFile) {
        log.debug("Converting bulk preview file");
        String content = "";
        try {
            content = new String(uploadFile.getFile().getBytes(), "UTF-8");
        } catch (Exception ex) {
            log.error("Error reading bulk preview file", ex);
        }

        content = content.replace(" ", "");
        content = content.replace("\n", BULK_PREVIEW_FILE_DELIMITER);
        if (content.length() > 0 && content.charAt(content.length() - 1) == ',') {
            content = content.substring(0, content.length() - 1);
        }

        return content;
    }

    /**
     *
     * @param uploadFile
     * @return
     */
    public String readFileContents(final UploadFile uploadFile) {
        try {
            return new String(uploadFile.getFile().getBytes(), "UTF-8");
        } catch (Exception ex) {
            log.error("Error reading file contents", ex);
            return "";
        }
    }

    /**
     *
     * @param uploadFile
     */
    public void uploadTestAdministrationData(final UploadFile uploadFile) {
        log.debug("Uploading file to bulk upload test administration data ");
        final ItemBankUser user = securityUtil.getItemBankUser();
        itemRepository.uploadTestAdministrationData(user, uploadFile.getFile());
    }

    /**
     *
     * @param uploadFile
     * @return
     */
    private AttachmentRequest newAttachmentRequest(final UploadFile uploadFile) {
        final String itemId = uploadFile.getItemId();
        final String itemType = uploadFile.getItemType();
        final String section = uploadFile.getSection();

        final MultipartFile file = uploadFile.getFile();

        final String fileName = file.getOriginalFilename();

        AttachmentRequest attachmentRequest = new AttachmentRequest();
        attachmentRequest.setItemId(itemId);
        attachmentRequest.setItemType(itemType);
        attachmentRequest.setFileName(fileName);
        attachmentRequest.setSection(section);
        attachmentRequest.setLanguage(ATTACHMENT_LANGUAGE);
        attachmentRequest.setTermId(uploadFile.getTermId());
        attachmentRequest.setLanguageId(uploadFile.getLanguageId());
        attachmentRequest.setDialectId(uploadFile.getDialectId());

        // Special case when uploading files to the core section general attachments or glossary
        if ( SECTION_GLOSSARY.equalsIgnoreCase(section) ||
                (SECTION_CORE.equals(section)
                && uploadFile.getItemType().equals(GENERAL_ATTACHMENTS))
            ) {
            return attachmentRequest;
        }

        if (TYPE_GI.equalsIgnoreCase(uploadFile.getItemType())) {
            validator.validateGiUploadFile(uploadFile);
        } else {
            attachmentRequest = ModelUtil.newAttachmentRequest(fileName, uploadFile.getSection());
            attachmentRequest.setResourceId(uploadFile.getResourceId());
            attachmentRequest.setTarget(uploadFile.getTarget());
        }

        return attachmentRequest;
    }


    private String getGlossaryFileName(final AttachmentRequest attachmentRequest) {
        return String.format("%s_%s_%s_%s_%s",
                attachmentRequest.getItemId(),
                attachmentRequest.getTermId(),
                attachmentRequest.getLanguageId().toLowerCase(),
                attachmentRequest.getDialectId(),
                attachmentRequest.getFileName());
    }
}
