package org.opentestsystem.ap.ims.service.export.writer;

import org.apache.commons.lang3.StringUtils;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemOption;
import org.opentestsystem.ap.common.model.McItem;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.ims.model.export.AdditionalInfo;
import org.opentestsystem.ap.ims.model.export.ItemExport;
import org.opentestsystem.ap.ims.model.export.McExportData;
import org.opentestsystem.ap.ims.model.export.Option;
import org.springframework.data.util.Pair;
import org.springframework.stereotype.Component;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Component
public class McItemContentWriter extends PdfContentWriter implements ItemContentWriter {
    private static final String template = "mc-export";
    private static final String correctAnswerAttributeId = "itm_att_Answer Key";

    @Override
    public boolean supportsItemType(final Item item) {
        return item instanceof McItem;
    }

    @Override
    public String getHtml(final ItemExport itemExport) {
        final McItem mcItem = (McItem) itemExport.getItem();

        Map<String, Object> data = new HashMap<>();
        Pair<String, String> promptContent = getPromptContent(itemExport, mcItem);

        List<Option> options = getOptions(itemExport, mcItem);

        String correctAnswer = StringUtils.EMPTY;
        if (itemExport.isIncludeRubrics()) {
            correctAnswer = findCorrectAnswer(itemExport);
        }

        McExportData exportData = new McExportData(mcItem.getId(), promptContent.getFirst(), promptContent.getSecond(), AdditionalInfo.create(itemExport), itemExport.isIncludeRubrics(), options, correctAnswer);
        data.put("data", exportData);

        return convertHtml(template, data, itemExport);
    }

    private List<Option> getOptions(ItemExport itemExport, McItem mcItem) {
        List<ItemOption> spanishOptions = new ArrayList<>();
        List<ItemOption> englishOptions = mcItem.getCore().getEn().getOptions();
        List<Option> options = new ArrayList<>();
        if (mcItem.getTranslations() != null
                && mcItem.getTranslations().getEsp() != null) {
            spanishOptions = mcItem.getTranslations().getEsp().getOptions();
        }

        //This logic is necessary because IAT does not make english/spansih match
        List<ItemOption> largerList = englishOptions.size() > spanishOptions.size() ? englishOptions : spanishOptions;

        for (int i = 0; i < largerList.size(); i++) {
            String englishOption = englishOptions.size() > i ? englishOptions.get(i).getText() : StringUtils.EMPTY;
            String spanishOption = spanishOptions.size() > i ? spanishOptions.get(i).getText() : StringUtils.EMPTY;

            options.add(new Option(translateEnglishContent(itemExport, englishOption), translateSpanishContent(itemExport, spanishOption)));
        }

        return options;
    }

    private String findCorrectAnswer(ItemExport itemExport) {
        List<ItemRelease.Item.Attriblist.Attrib> attributes = itemExport.getItemRelease().getItem().getAttriblist().getAttrib();

        for (ItemRelease.Item.Attriblist.Attrib attribute : attributes) {
            if (correctAnswerAttributeId.equals(attribute.getAttid())) {
                return attribute.getName() + " " + attribute.getVal();
            }
        }

        return StringUtils.EMPTY;
    }

    private Pair<String, String> getPromptContent(ItemExport itemExport, McItem item) {
        String englishContent = translateEnglishContent(itemExport, item.getCore().getEn().getPrompt());

        String spanishContent = StringUtils.EMPTY;
        if (item.getTranslations() != null && item.getTranslations().getEsp() != null) {
            spanishContent = translateSpanishContent(itemExport, item.getTranslations().getEsp().getPrompt());
        }

        return Pair.of(englishContent, spanishContent);
    }
}
