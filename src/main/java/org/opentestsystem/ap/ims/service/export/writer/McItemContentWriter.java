package org.opentestsystem.ap.ims.service.export.writer;

import com.itextpdf.html2pdf.ConverterProperties;
import com.itextpdf.kernel.pdf.PdfWriter;
import com.itextpdf.layout.Document;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.McItem;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.ims.model.export.AdditionalInfo;
import org.opentestsystem.ap.ims.model.export.ItemExport;
import org.opentestsystem.ap.ims.model.export.McExportData;
import org.springframework.stereotype.Component;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Component
public class McItemContentWriter extends PdfContentWriter implements ItemContentWriter {
    private static final String template = "mc-export";

    @Override
    public boolean supportsItemType(final Item item) {
        return item instanceof McItem;
    }

    @Override
    public void addContent(final PdfWriter pdfWriter, final Document document, final ConverterProperties properties, final ItemExport itemExport) {
        final ItemRelease itemRelease = itemExport.getItemRelease();
        final McItem mcItem = (McItem) itemExport.getItem();

        Map<String, List<ItemRelease.Item.Content>> contentLanguages = groupItemContentByLanguage(itemRelease);
        Map<String, Object> data = new HashMap<>();
        String promptContent = getPromptContent(itemRelease);

        boolean spanishOptions = isSpanishOptionsPresent(mcItem);
        List<ItemRelease.Item.Content.Optionlist.Option> options = new ArrayList<>();
        List<ItemRelease.Item.Content> contents = new ArrayList<>();

        if (spanishOptions) {
            contents.addAll(contentLanguages.get(spanishCode));
        } else {
            contents.addAll(contentLanguages.get(englishCode));
        }

        for (ItemRelease.Item.Content content : contents) {
            if (content.getOptionlist() == null) {
                continue;
            }

            options.addAll(content.getOptionlist().getOption());
        }

        McExportData exportData = new McExportData(mcItem.getId(), promptContent, AdditionalInfo.create(itemExport), itemExport.isIncludeRubrics(), options);
        data.put("data", exportData);

        String html = convertHtml(template, data);

        addHtmlToPdf(document, properties, html);
    }

    private boolean isSpanishOptionsPresent(McItem mcItem) {
        return mcItem.getTranslations().getEsp() != null
                && !mcItem.getTranslations().getEsp().getOptions().isEmpty();
    }
}
