package org.opentestsystem.ap.ims.service.export.writer;

import org.apache.commons.lang3.StringUtils;
import org.opentestsystem.ap.common.model.EbsrItem;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.content.EbsrItemContent;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.ims.model.export.AdditionalInfo;
import org.opentestsystem.ap.ims.model.export.EbsrExportData;
import org.opentestsystem.ap.ims.model.export.EbsrPart;
import org.opentestsystem.ap.ims.model.export.ItemExport;
import org.springframework.stereotype.Component;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import static org.apache.commons.lang3.StringUtils.isEmpty;
import static org.apache.commons.lang3.StringUtils.isNotEmpty;

@Component
public class EbsrItemContentWriter extends PdfContentWriter implements ItemContentWriter {
    private static final String template = "ebsr-export";
    private static final String AttribueIdPartBAnswer = "itm_att_Answer Key (Part II)";
    private static final String AttribueIdPartAAnswer = "itm_att_Answer Key";

    @Override
    public boolean supportsItemType(final Item item) {
        return item instanceof EbsrItem;
    }

    @Override
    public String getHtml(ItemExport itemExport) {
        EbsrItem ebsrItem = (EbsrItem) itemExport.getItem();
        EbsrItemContent english = ebsrItem.getCore().getEn();

        String spanishContent = StringUtils.EMPTY;

        if (ebsrItem.getTranslations() != null && ebsrItem.getTranslations().getEsp() != null) {
            EbsrItemContent spanish = ebsrItem.getTranslations().getEsp();
            spanishContent = translateSpanishContent(itemExport, spanish.getPrompt());
        }

        String promptContent = translateEnglishContent(itemExport, english.getPrompt()) + "&nbsp;" + spanishContent;
        EbsrExportData exportData = new EbsrExportData(ebsrItem.getId(), promptContent, AdditionalInfo.create(itemExport), itemExport.isIncludeRubrics(), getPartB(itemExport), getPartA(itemExport));

        Map<String, Object> data = new HashMap<>();
        data.put("data", exportData);

        String html = convertHtml(template, data, itemExport);

        writeHtmlToFile(itemExport, html);

        return html;
    }

    private EbsrPart getPartA(ItemExport itemExport) {
        EbsrItem ebsrItem = (EbsrItem) itemExport.getItem();
        EbsrItemContent english = ebsrItem.getCore().getEn();

        String spanishContent = StringUtils.EMPTY;
        List<String> spanishPartAOptions = new ArrayList<>();

        if (ebsrItem.getTranslations() != null && ebsrItem.getTranslations().getEsp() != null) {
            EbsrItemContent spanish = ebsrItem.getTranslations().getEsp();
            spanishContent = translateSpanishContent(itemExport, spanish.getPartAPrompt());

            spanishPartAOptions = spanish.getPartAOptions().stream().map(itemOption -> translateSpanishContent(itemExport, itemOption.getText())).collect(Collectors.toList());
        }

        String englishContent = translateEnglishContent(itemExport, english.getPartAPrompt());
        List<String> englishPartAOptions = english.getPartAOptions().stream().map(itemOption -> translateEnglishContent(itemExport, itemOption.getText())).collect(Collectors.toList());

        List<String> combinedAnswers = computeCombinedAnswers(englishPartAOptions, spanishPartAOptions);

        return new EbsrPart(englishContent, spanishContent, combinedAnswers, getAnswerKey(AttribueIdPartAAnswer, itemExport.getItemRelease()));
    }

    private EbsrPart getPartB(ItemExport itemExport) {
        EbsrItem ebsrItem = (EbsrItem) itemExport.getItem();
        EbsrItemContent english = ebsrItem.getCore().getEn();

        String spanishContent = StringUtils.EMPTY;
        List<String> spanishPartBOptions = new ArrayList<>();

        if (ebsrItem.getTranslations() != null && ebsrItem.getTranslations().getEsp() != null) {
            EbsrItemContent spanish = ebsrItem.getTranslations().getEsp();
            spanishContent = translateSpanishContent(itemExport, spanish.getPrompt());

            spanishPartBOptions = spanish.getPartBOptions().stream().map(itemOption -> translateSpanishContent(itemExport, itemOption.getText())).collect(Collectors.toList());
        }

        String englishContent = translateEnglishContent(itemExport, english.getPrompt());
        List<String> englishPartBOptions = english.getPartBOptions().stream().map(itemOption -> translateEnglishContent(itemExport, itemOption.getText())).collect(Collectors.toList());

        List<String> combinedAnswers = computeCombinedAnswers(englishPartBOptions, spanishPartBOptions);

        String type = english.getPartBType();

        return new EbsrPart(type, englishContent, spanishContent, combinedAnswers, getAnswerKey(AttribueIdPartBAnswer, itemExport.getItemRelease()));
    }

    private String getAnswerKey(final String attributeId, ItemRelease itemRelease) {
        return itemRelease.getItem().getAttriblist().getAttrib()
                .stream()
                .filter(attrib -> attributeId.equals(attrib.getAttid()))
                .map(ItemRelease.Item.Attriblist.Attrib::getVal)
                .findFirst()
                .orElse(StringUtils.EMPTY);
    }

    private List<String> computeCombinedAnswers(final List<String> englishOptions, final List<String> spanishOptions) {
        List<String> largerOptionList = englishOptions.size() > spanishOptions.size() ? englishOptions : spanishOptions;
        List<String> combinedOptions = new ArrayList<>();

        for (int i = 0; i < largerOptionList.size(); i++) {
            String spanishOption = spanishOptions.size() > i ? spanishOptions.get(i) : StringUtils.EMPTY;
            String englishOption = englishOptions.size() > i ? englishOptions.get(i) : StringUtils.EMPTY;

            if (isNotEmpty(englishOption) && isEmpty(spanishOption)) {
                combinedOptions.add(englishOption);
            } else if (isEmpty(englishOption) && isNotEmpty(spanishOption)) {
                combinedOptions.add(spanishOption);
            } else {
                combinedOptions.add(spanishOption + "&nbsp;" + englishOption);
            }
        }

        return combinedOptions;
    }
}
