package org.opentestsystem.ap.ims.service.export.writer;

import com.itextpdf.html2pdf.ConverterProperties;
import com.itextpdf.kernel.pdf.PdfWriter;
import com.itextpdf.layout.Document;
import org.opentestsystem.ap.common.model.EqItem;
import org.opentestsystem.ap.common.model.EqPart;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.ims.model.export.AdditionalInfo;
import org.opentestsystem.ap.ims.model.export.EqExportData;
import org.opentestsystem.ap.ims.model.export.ItemExport;
import org.springframework.stereotype.Component;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Component
public class EqItemContentWriter extends PdfContentWriter implements ItemContentWriter {
    private static final String template = "eq-export";

    @Override
    public boolean supportsItemType(final Item item) {
        return item instanceof EqItem;
    }

    @Override
    public void addContent(final PdfWriter pdfWriter,
                           final Document document,
                           final ConverterProperties properties,
                           final ItemExport itemExport) {
        EqItem eqItem = (EqItem) itemExport.getItem();
        List<EqPart> parts = eqItem.getCore().getEn().getParts();
        String promptContent = getPromptContent(itemExport.getItemRelease());
        AdditionalInfo additionalInfo = AdditionalInfo.create(itemExport);
        EqExportData exportData;
        if(itemExport.isIncludeRubrics()) {
            String rubric = eqItem.getCore().getScoring().getRubric();
            exportData = new EqExportData(eqItem.getId(), promptContent, additionalInfo, itemExport.isIncludeRubrics(), parts, rubric);
        } else {
            exportData = new EqExportData(eqItem.getId(), promptContent, additionalInfo, itemExport.isIncludeRubrics(), parts);
        }

        Map<String, Object> data = new HashMap<>();
        data.put("data", exportData);

        String html = convertHtml(template, data);
        addHtmlToPdf(document, properties, convertSvgToPng(html, itemExport.getClonedItemDirectory()));
    }
}
