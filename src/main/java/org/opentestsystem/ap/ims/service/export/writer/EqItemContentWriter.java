package org.opentestsystem.ap.ims.service.export.writer;

import com.itextpdf.html2pdf.ConverterProperties;
import com.itextpdf.kernel.pdf.PdfWriter;
import com.itextpdf.layout.Document;
import org.opentestsystem.ap.common.model.EqItem;
import org.opentestsystem.ap.common.model.EqPart;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.springframework.stereotype.Component;

import java.nio.file.Path;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Component
public class EqItemContentWriter extends PdfContentWriter implements ItemContentWriter {
    private static final String template = "eq-export";

    @Override
    public boolean supportsItemType(final Item item) {
        return item instanceof EqItem;
    }

    @Override
    public void addContent(final PdfWriter pdfWriter,
                           final Document document,
                           final Item item,
                           final ItemRelease itemRelease,
                           ConverterProperties properties,
                           Path clonedItemDirectory) {
        Map<String, List<ItemRelease.Item.Content>> contentLanguages = groupItemContentByLanguage(itemRelease);

        StringBuilder promptContent = new StringBuilder();

        if(!contentLanguages.get(spanishCode).isEmpty()) {
            for(ItemRelease.Item.Content content : contentLanguages.get(spanishCode)) {
                promptContent.append(content.getStem());
            }
        } else {
            for(ItemRelease.Item.Content content : contentLanguages.get(englishCode)) {
                promptContent.append(content.getStem());
            }
        }

        EqItem eqItem = (EqItem) item;
        EqExportData exportData = new EqExportData(item.getId(), promptContent.toString(), eqItem.getCore().getEn().getParts());
        Map<String, Object> data = new HashMap<>();
        data.put("data", exportData);

        String html = convertHtml(template, data);

        addHtmlToPdf(document, properties, convertSvgToPng(html, clonedItemDirectory));
    }

    private static class EqExportData {
        private String itemId;
        private String promptContent;
        private List<EqPart> parts;

        public EqExportData(final String itemId, final String promptContent, final List<EqPart> parts) {
            this.promptContent = promptContent;
            this.parts = parts;
            this.itemId = itemId;
        }

        public String getPromptContent() {
            return promptContent;
        }

        public List<EqPart> getParts() {
            return parts;
        }

        public String getItemId() {
            return itemId;
        }
    }
}
