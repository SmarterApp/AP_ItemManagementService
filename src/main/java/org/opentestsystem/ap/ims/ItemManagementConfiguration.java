/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestsystem.ap.ims;

import lombok.extern.slf4j.Slf4j;
import org.opentestsystem.ap.common.assembler.AppAssembler;
import org.opentestsystem.ap.common.bulkupdate.BulkUpdateService;
import org.opentestsystem.ap.common.bulkupdate.testadmin.TestAdminProcessor;
import org.opentestsystem.ap.common.bulkupdate.testadmin.TestAdminUtil;
import org.opentestsystem.ap.common.config.BrokerConfig;
import org.opentestsystem.ap.common.config.ContentNegotiationConfig;
import org.opentestsystem.ap.common.config.DatabaseConfiguration;
import org.opentestsystem.ap.common.config.FreemarkerConfig;
import org.opentestsystem.ap.common.config.ItemBankProperties;
import org.opentestsystem.ap.common.config.ItemManagerProducerConfiguration;
import org.opentestsystem.ap.common.config.RedisSessionConfig;
import org.opentestsystem.ap.common.config.SecurityConfig;
import org.opentestsystem.ap.common.config.SessionConfig;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreItemManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.attachment.mapper.ItemAttachmentMapper;
import org.opentestsystem.ap.common.datastore.preview.AsyncDataStorePreviewManager;
import org.opentestsystem.ap.common.datastore.preview.DataStorePreviewManager;
import org.opentestsystem.ap.common.datastore.preview.PreviewManager;
import org.opentestsystem.ap.common.itembank.AttachmentValidator;
import org.opentestsystem.ap.common.itembank.EquationEditorRepository;
import org.opentestsystem.ap.common.management.ItemManager;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.ItemFactory;
import org.opentestsystem.ap.common.model.JsonModelAssembler;
import org.opentestsystem.ap.common.restclient.HistoryClient;
import org.opentestsystem.ap.common.saaif.SaaifAssembler;
import org.opentestsystem.ap.common.saaif.SaaifMetadataAssembler;
import org.opentestsystem.ap.common.saaif.SaaifWordListAssembler;
import org.opentestsystem.ap.common.saaif.StringAssembler;
import org.opentestsystem.ap.common.saaif.item.AssociatedStimulusSupplier;
import org.opentestsystem.ap.common.saaif.transformer.TransformerFactory;
import org.opentestsystem.ap.common.security.SecurityUtil;
import org.opentestsystem.ap.common.task.TaskProperties;
import org.opentestsystem.ap.common.util.ImageGenerator;
import org.opentestsystem.ap.common.util.WirisImageGenerator;
import org.opentestsystem.ap.ims.task.ResourceCleanupTask;
import org.opentestsystem.rdw.common.status.StatusConfiguration;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.boot.web.client.RestTemplateBuilder;
import org.springframework.cache.CacheManager;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Import;
import org.springframework.data.redis.cache.DefaultRedisCachePrefix;
import org.springframework.data.redis.cache.RedisCacheManager;
import org.springframework.data.redis.core.RedisTemplate;

/**
 * The item bank configuration to use when the data store manages items.
 */
@Slf4j
@Configuration
@Import({
    StatusConfiguration.class,
    ContentNegotiationConfig.class,
    DatabaseConfiguration.class,
    BrokerConfig.class,
    FreemarkerConfig.class,
    ItemManagerProducerConfiguration.class,
    RedisSessionConfig.class,
    SecurityConfig.class,
    SessionConfig.class
})
@EnableConfigurationProperties({ItemBankProperties.class, TaskProperties.class})
public class ItemManagementConfiguration {

    private final ItemBankProperties itemBankProperties;

    private final ItemResourceProperties itemResourceProperties;

    private final RestTemplateBuilder restTemplateBuilder;

    private final RabbitTemplate rabbitTemplate;

    private final freemarker.template.Configuration freemarker;

    private final HistoryClient historyClient;

    private final DataStoreDataManager dataStoreDataManager;

    private final DataStoreAttachmentManager dataStoreAttachmentManager;

    private final DataStoreUtility dataStoreUtility;

    private final SecurityUtil securityUtil;

    private final ItemAttachmentMapper itemAttachmentMapper;


    @Value("${cache.expirationSeconds:30}")
    private int cacheExpirationSeconds;

    public ItemManagementConfiguration(ItemBankProperties itemBankProperties,
                                       ItemResourceProperties itemResourceProperties,
                                       RestTemplateBuilder restTemplateBuilder,
                                       RabbitTemplate rabbitTemplate,
                                       freemarker.template.Configuration freemarker,
                                       HistoryClient historyClient,
                                       DataStoreDataManager dataStoreDataManager,
                                       DataStoreAttachmentManager dataStoreAttachmentManager,
                                       DataStoreUtility dataStoreUtility,
                                       SecurityUtil securityUtil,
                                       final ItemAttachmentMapper itemAttachmentMapper) {
        this.itemBankProperties = itemBankProperties;
        this.itemResourceProperties = itemResourceProperties;
        this.restTemplateBuilder = restTemplateBuilder;
        this.rabbitTemplate = rabbitTemplate;
        this.freemarker = freemarker;
        this.historyClient = historyClient;
        this.dataStoreDataManager = dataStoreDataManager;
        this.dataStoreAttachmentManager = dataStoreAttachmentManager;
        this.dataStoreUtility = dataStoreUtility;
        this.securityUtil = securityUtil;
        this.itemAttachmentMapper = itemAttachmentMapper;
    }

    // ------------------------------------------------------------------------

    @Bean
    @ConditionalOnMissingBean
    public ItemFactory itemFactory() {
        log.info("Creating bean itemFactory");
        return new ItemFactory();
    }

    @Bean
    @ConditionalOnMissingBean
    public JsonModelAssembler jsonModelAssembler() {
        log.info("Creating bean jsonModelAssembler");
        return new JsonModelAssembler();
    }

    @Bean
    @ConditionalOnMissingBean
    public EquationEditorRepository equationEditorRepository() {
        log.info("Creating bean equationEditorRepository");
        return new EquationEditorRepository();
    }

    @Bean
    @ConditionalOnMissingBean
    public AttachmentValidator attachmentValidator() {
        log.info("Creating bean attachmentValidator");
        return new AttachmentValidator(this.itemBankProperties);
    }

    // ------------------------------------------------------------------------

    @Bean
    @ConditionalOnMissingBean
    public ItemManagerEventProducer itemManagementEventProducer() {
        log.info("Creating bean itemManagementEventProducer");
        return new ItemManagerEventProducer(this.itemBankProperties, this.rabbitTemplate);
    }

    @Bean
    @ConditionalOnMissingBean
    public DataStoreItemManager dataStoreItemManager() {
        log.info("Creating bean dataStoreItemManager");
        return new DataStoreItemManager(
            this.itemBankProperties,
            this.dataStoreDataManager,
            this.dataStoreAttachmentManager,
            itemManagementEventProducer(),
            this.dataStoreUtility,
            this.itemAttachmentMapper);
    }

    @Bean
    @ConditionalOnMissingBean
    public ItemManager itemManager() {
        log.info("Creating bean itemManager");
        return new ItemManager(
            dataStoreItemManager(),
            null,
            attachmentValidator(),
            equationEditorRepository(),
            this.securityUtil);
    }

    // ------------------------------------------------------------------------

    @Bean
    @ConditionalOnMissingBean
    public TestAdminUtil testAdminUtil() {
        log.info("Creating bean testAdminUtil");
        return new TestAdminUtil();
    }

    @Bean
    @ConditionalOnMissingBean
    public TestAdminProcessor testAdminProcessor() {
        log.info("Creating bean testAdminProcessor");
        return new TestAdminProcessor(
            this.itemBankProperties,
            this.dataStoreDataManager,
            itemManagementEventProducer(),
            this.dataStoreUtility,
            testAdminUtil());
    }

    @Bean
    @ConditionalOnMissingBean
    public BulkUpdateService bulkUpdateService() {
        log.info("Creating bean bulkUpdateService");
        return new BulkUpdateService(testAdminProcessor());
    }

    // ------------------------------------------------------------------------

    @Bean
    @ConditionalOnMissingBean
    public ImageGenerator imageGenerator() {
        log.info("Creating bean imageGenerator");
        return new WirisImageGenerator(itemBankProperties, restTemplateBuilder);
    }

    @Bean
    @ConditionalOnMissingBean
    public PreviewManager previewManager() {
        log.info("Creating bean previewManager");
        return new PreviewManager(
            this.dataStoreAttachmentManager,
            appAssembler(),
            transformerFactory(),
            imageGenerator()
        );
    }

    @Bean
    @ConditionalOnMissingBean
    public AsyncDataStorePreviewManager asyncDataStorePreviewManager() {
        log.info("Creating bean asyncDataStorePreviewManager");
        return new AsyncDataStorePreviewManager(
            this.itemBankProperties,
            this.dataStoreDataManager,
            this.dataStoreAttachmentManager,
            previewManager()
        );
    }

    @Bean
    @ConditionalOnMissingBean
    public DataStorePreviewManager dataStorePreviewManager() {
        log.info("Creating bean dataStorePreviewManager");
        return new DataStorePreviewManager(
            this.itemBankProperties,
            this.dataStoreDataManager,
            this.dataStoreAttachmentManager,
            asyncDataStorePreviewManager(),
            this.historyClient,
            previewManager()
        );
    }

    @Bean
    @ConditionalOnMissingBean
    public AppAssembler appAssembler() {
        log.info("Creating bean appAssembler");
        return new AppAssembler(saaifAssembler(), jsonModelAssembler(), stringAssembler());
    }

    @Bean
    @ConditionalOnMissingBean
    public StringAssembler stringAssembler() {
        log.info("Creating bean stringAssembler");
        return new StringAssembler(this.freemarker);
    }

    @Bean
    @ConditionalOnMissingBean
    public SaaifAssembler saaifAssembler() {
        log.info("Creating bean saaifAssembler");
        return new SaaifAssembler(saaifMetadataAssembler(), saaifWordListAssembler());
    }

    @Bean
    @ConditionalOnMissingBean
    public SaaifMetadataAssembler saaifMetadataAssembler() {
        log.info("Creating bean saaifMetadataAssembler");
        return new SaaifMetadataAssembler();
    }

    @Bean
    @ConditionalOnMissingBean
    public SaaifWordListAssembler saaifWordListAssembler() {
        log.info("Creating bean saaifWordListAssembler");
        return new SaaifWordListAssembler();
    }

    @Bean
    @ConditionalOnMissingBean
    public AssociatedStimulusSupplier associatedStimulusSupplier() {
        log.info("Creating bean associatedStimulusSupplier");
        return new AssociatedStimulusSupplier(this.dataStoreDataManager);
    }

    @Bean
    @ConditionalOnMissingBean
    public TransformerFactory transformerFactory() {
        log.info("Creating bean transformerFactory");
        return new TransformerFactory(associatedStimulusSupplier());
    }
    // ------------------------------------------------------------------------

    @Bean
    @ConditionalOnMissingBean
    public CacheManager cacheManager(RedisTemplate redisTemplate) {
        log.info("Creating bean cacheManager");
        DefaultRedisCachePrefix cachePrefix = new DefaultRedisCachePrefix();
        cachePrefix.prefix("ims");

        RedisCacheManager cacheManager = new RedisCacheManager(redisTemplate);
        cacheManager.setCachePrefix(cachePrefix);
        cacheManager.setUsePrefix(true);
        cacheManager.setDefaultExpiration(this.cacheExpirationSeconds);
        return cacheManager;
    }

    @Bean
    public ResourceCleanupTask resourceCleanupTask() {
        log.info("Creating bean resourceCleanupTask");
        return new ResourceCleanupTask(this.itemResourceProperties);
    }
}
