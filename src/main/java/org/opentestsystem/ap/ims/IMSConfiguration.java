/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestsystem.ap.ims;

import org.opentestsystem.ap.common.bulkupdate.BulkUpdateService;
import org.opentestsystem.ap.common.bulkupdate.testadmin.TestAdminProcessor;
import org.opentestsystem.ap.common.bulkupdate.testadmin.TestAdminUtil;
import org.opentestsystem.ap.common.config.ItemBankProperties;
import org.opentestsystem.ap.common.datastore.AsyncDataStorePreviewManager;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreItemManager;
import org.opentestsystem.ap.common.datastore.DataStorePreviewManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.client.S3BucketManager;
import org.opentestsystem.ap.common.datastore.client.S3VersionedBucketManager;
import org.opentestsystem.ap.common.datastore.repository.ItemEntityRepository;
import org.opentestsystem.ap.common.datastore.repository.ItemHistoryRepository;
import org.opentestsystem.ap.common.datastore.repository.ItemSyncRepository;
import org.opentestsystem.ap.common.datastore.repository.WorkflowStatusRepository;
import org.opentestsystem.ap.common.datastore.repository.WorkflowStatusTransitionRepository;
import org.opentestsystem.ap.common.gitlab.GitLabItemManager;
import org.opentestsystem.ap.common.itembank.AttachmentValidator;
import org.opentestsystem.ap.common.itembank.EquationEditorRepository;
import org.opentestsystem.ap.common.management.ItemManager;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.repository.ItemRepository;
import org.opentestsystem.ap.common.task.ItemCleanupTask;
import org.opentestsystem.ap.common.task.TaskProperties;
import org.opentestsystem.ap.common.util.ImageGenerator;
import org.opentestsystem.ap.common.util.WirisImageGenerator;
import org.opentestsystem.rdw.common.status.StatusConfiguration;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.web.client.RestTemplateBuilder;
import org.springframework.cache.CacheManager;
import org.springframework.cache.annotation.EnableCaching;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Import;
import org.springframework.data.redis.cache.DefaultRedisCachePrefix;
import org.springframework.data.redis.cache.RedisCacheManager;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.scheduling.annotation.EnableScheduling;

/**
 * The item bank configuration to use when the data store manages items.
 */
@EnableCaching
@EnableScheduling
@Configuration
@Import(StatusConfiguration.class)
public class IMSConfiguration {

    private final ItemBankProperties itemBankProperties;

    @Value("${cache.expirationSeconds:30}")
    private int cacheExpirationSeconds;

    public IMSConfiguration(ItemBankProperties itemBankProperties) {
        this.itemBankProperties = itemBankProperties;
    }

    // ------------------------------------------------------------------------

    @Bean
    @ConditionalOnMissingBean
    public S3BucketManager s3BucketManager() {
        return new S3BucketManager(itemBankProperties);
    }

    @Bean
    @ConditionalOnMissingBean
    public S3VersionedBucketManager s3VersionedBucketManager() {
        return new S3VersionedBucketManager(itemBankProperties);
    }

    @Bean
    @ConditionalOnMissingBean
    public DataStoreUtility dataStoreUtility() {
        return new DataStoreUtility();
    }

    @Bean
    @ConditionalOnMissingBean
    public DataStoreAttachmentManager dataStoreAttachmentManager(S3BucketManager s3BucketManager,
                                                                 S3VersionedBucketManager s3VersionedBucketManager,
                                                                 DataStoreUtility dataStoreUtility) {
        return new DataStoreAttachmentManager(
            this.itemBankProperties,
            s3BucketManager,
            s3VersionedBucketManager,
            dataStoreUtility);
    }

    @Bean
    @ConditionalOnMissingBean
    public DataStoreDataManager dataStoreDataManager(ItemEntityRepository itemEntityRepository,
                                                     WorkflowStatusRepository workflowStatusRepository,
                                                     WorkflowStatusTransitionRepository workflowStatusTransitionRepository,
                                                     ItemSyncRepository itemSyncRepository,
                                                     ItemHistoryRepository itemHistoryRepository) {
        return new DataStoreDataManager(
            this.itemBankProperties,
            itemEntityRepository,
            workflowStatusRepository,
            workflowStatusTransitionRepository,
            itemSyncRepository,
            itemHistoryRepository);
    }

    @Bean
    @ConditionalOnMissingBean
    public ItemManagerEventProducer itemManagementEventProducer(RabbitTemplate rabbitTemplate) {
        return new ItemManagerEventProducer(this.itemBankProperties, rabbitTemplate);
    }

    @Bean
    @ConditionalOnMissingBean
    public DataStoreItemManager dataStoreItemManager(DataStoreDataManager dataManager,
                                                     DataStoreAttachmentManager attachmentManager,
                                                     ItemManagerEventProducer itemManagementEventProducer,
                                                     DataStoreUtility utility) {
        return new DataStoreItemManager(
            this.itemBankProperties,
            dataManager,
            attachmentManager,
            itemManagementEventProducer,
            utility);
    }

    // ------------------------------------------------------------------------

    @Bean
    @ConditionalOnMissingBean
    public GitLabItemManager gitLabManager(ItemRepository itemRepository) {
        return new GitLabItemManager(this.itemBankProperties, itemRepository);
    }

    // ------------------------------------------------------------------------

    @Bean
    @ConditionalOnMissingBean
    public ItemManager itemManager(DataStoreItemManager dataStoreManager,
                                   GitLabItemManager gitLabManager,
                                   AttachmentValidator attachmentValidator,
                                   EquationEditorRepository equationEditorRepository) {
        return new ItemManager(
            dataStoreManager, gitLabManager, attachmentValidator, equationEditorRepository);
    }

    // ------------------------------------------------------------------------

    @Bean
    @ConditionalOnMissingBean
    public TestAdminUtil testAdminUtil() {
        return new TestAdminUtil();
    }

    @Bean
    @ConditionalOnMissingBean
    public TestAdminProcessor testAdminProcessor(DataStoreDataManager dataStoreDataManager,
                                                 ItemManagerEventProducer itemManagementEventProducer,
                                                 DataStoreUtility dataStoreUtility,
                                                 TestAdminUtil testAdminUtil) {
        return new TestAdminProcessor(this.itemBankProperties, dataStoreDataManager, itemManagementEventProducer,
            dataStoreUtility, testAdminUtil);
    }

    @Bean
    @ConditionalOnMissingBean
    public BulkUpdateService bulkUpdateService(TestAdminProcessor testAdminProcessor) {
        return new BulkUpdateService(testAdminProcessor);
    }

    // ------------------------------------------------------------------------

    @Bean
    public ItemCleanupTask itemCleanupTask(TaskProperties taskProperties) {
        return new ItemCleanupTask(taskProperties, this.itemBankProperties);
    }

    @Bean
    @ConditionalOnMissingBean
    public CacheManager cacheManager(RedisTemplate redisTemplate) {
        DefaultRedisCachePrefix cachePrefix = new DefaultRedisCachePrefix();
        cachePrefix.prefix("ims");

        RedisCacheManager cacheManager = new RedisCacheManager(redisTemplate);
        cacheManager.setCachePrefix(cachePrefix);
        cacheManager.setUsePrefix(true);
        cacheManager.setDefaultExpiration(this.cacheExpirationSeconds);
        return cacheManager;
    }


    @Bean
    @ConditionalOnMissingBean
    public AsyncDataStorePreviewManager asyncDataStorePreviewManager(DataStoreDataManager dataManager,
                                                                     DataStoreAttachmentManager attachmentManager,
                                                                     ItemRepository itemRepository) {
        return new AsyncDataStorePreviewManager(
            this.itemBankProperties,
            dataManager,
            attachmentManager,
            itemRepository
        );
    }

    @Bean
    @ConditionalOnMissingBean
    public DataStorePreviewManager dataStorePreviewManager(DataStoreDataManager dataManager,
                                                           DataStoreAttachmentManager attachmentManager,
                                                           ItemRepository itemRepository,
                                                           AsyncDataStorePreviewManager asyncDataStorePreviewManager) {
        return new DataStorePreviewManager(
            this.itemBankProperties,
            dataManager,
            attachmentManager,
            itemRepository,
            asyncDataStorePreviewManager
        );
    }

    @Bean
    @ConditionalOnMissingBean
    public ImageGenerator imageGenerator(RestTemplateBuilder restTemplateBuilder) {
        return new WirisImageGenerator(this.itemBankProperties, restTemplateBuilder);
    }
}
