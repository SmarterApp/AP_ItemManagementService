package org.opentestsystem.ap.ims.rest;

import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.opentestsystem.ap.common.exception.ResourceNotFoundException;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.ims.model.ItemResource;
import org.opentestsystem.ap.ims.service.ItemEntityService;
import org.springframework.core.io.InputStreamResource;
import org.springframework.http.CacheControl;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import java.util.UUID;

import static java.lang.String.format;

@Slf4j
@RestController
@RequestMapping("/api/v1/item-versions")
public class ItemVersionApi {

    private final ItemEntityService itemEntityService;

    public ItemVersionApi(ItemEntityService itemEntityService) {
        this.itemEntityService = itemEntityService;
    }

    // ------------------------------------------------------------------------
    // Item Methods
    // ------------------------------------------------------------------------

    /**
     * Finds the version of the item requested.  Version is optional and if not present then the latest version of the
     * item is returned.
     *
     * @param itemId  The item to find.
     * @param version The version of the item to find if present.
     * @return The item.
     */
    @GetMapping("/{itemId}")
    public Item getItem(@PathVariable final String itemId,
                        @RequestParam(value = "version", required = false) final String version) {
        log.debug("getItem " + itemId + " version " + version);
        return StringUtils.isBlank(version)
            ? this.getLatestItem(itemId)
            : this.getItemByVersion(itemId, UUID.fromString(version));
    }

    private Item getLatestItem(final String itemId) {
        return this.itemEntityService.findLatestItemEntity(itemId)
            .orElseThrow(() -> new ResourceNotFoundException("Unable to find item " + itemId))
            .getItem();
    }

    private Item getItemByVersion(final String itemId, final UUID version) {
        Item item = itemEntityService.findItemEntityById(version)
            .orElseThrow(() -> new ResourceNotFoundException(
                format("Unable to find version %s for item %s", version, itemId)))
            .getItem();

        // confirm the given item ID matches the one associated with the commitId
        if (!itemId.equalsIgnoreCase(item.getId())) {
            throw new ResourceNotFoundException(
                format("Unable to find version %s for item %s", version, itemId));
        }

        return item;
    }

    // ------------------------------------------------------------------------
    // Item Resource Methods
    // ------------------------------------------------------------------------

    @GetMapping("/{itemId}/resources/glossary/{fileName:.+}")
    public ResponseEntity<InputStreamResource> getItemGlossaryResource(
        @PathVariable final String itemId,
        @PathVariable final String fileName,
        @RequestParam(value = "version", required = false) final String version) {
        return this.getItemResource(itemId, "glossary/" + fileName, version);
    }

    @GetMapping("/{itemId}/resources/{fileName:.+}")
    public ResponseEntity<InputStreamResource> getItemResource(
        @PathVariable final String itemId,
        @PathVariable final String fileName,
        @RequestParam(value = "version", required = false) final String version) {

        ItemResource itemResource = StringUtils.isBlank(version)
            ? this.getLatestItemResource(itemId, fileName)
            : this.getItemResourceByVersion(itemId, UUID.fromString(version), fileName);

        return ResponseEntity.ok()
            .contentType(itemResource.getMediaType())
            .cacheControl(CacheControl.noCache())
            .body(itemResource.getInputStreamResource());
    }

    private ItemResource getLatestItemResource(String itemId, String fileName) {
        return this.itemEntityService.findItemResource(itemId, fileName).orElseThrow(() ->
            new ResourceNotFoundException(
                format("Unable to find %s for item %s", fileName, itemId)));
    }

    private ItemResource getItemResourceByVersion(String itemId, UUID version, String fileName) {
        return this.itemEntityService.findItemResource(itemId, fileName).orElseThrow(() ->
            new ResourceNotFoundException(
                format("Unable to find version %s of %s for item %s", version, fileName, itemId)));
    }
}
