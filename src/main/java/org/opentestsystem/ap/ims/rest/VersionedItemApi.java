package org.opentestsystem.ap.ims.rest;

import lombok.extern.slf4j.Slf4j;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.ims.model.ItemResource;
import org.opentestsystem.ap.ims.service.VersionedItemService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.InputStreamResource;
import org.springframework.http.CacheControl;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

@Slf4j
@RestController
@RequestMapping("/api/v1/versioned-items")
public class VersionedItemApi {
    private final VersionedItemService versionedItemService;

    @Autowired
    public VersionedItemApi(final VersionedItemService versionedItemService) {
        this.versionedItemService = versionedItemService;
    }

    @GetMapping("/{itemId}")
    public Item getItem(@PathVariable final String itemId,
                        @RequestParam final String version) {
        return versionedItemService.getItem(itemId, version)
            .orElseThrow(() ->
                version == null ?
                    new IllegalArgumentException("Unable to find an item by id [" + itemId + "]") :
                    new IllegalArgumentException(
                        "Unable to find an item by id [" + itemId + "] and version [" + version + "]"));
    }

    @GetMapping("/{itemId}/resources/{fileName}")
    public ResponseEntity<InputStreamResource> getAttachedFile(@PathVariable final String itemId,
                                                               @PathVariable final String fileName,
                                                               @RequestParam final String version) {
        final ItemResource itemResource = versionedItemService.getItemResource(itemId, version, fileName)
            .orElseThrow(() ->
                version == null ?
                    new IllegalArgumentException("Unable to find an item by id [" + itemId + "]") :
                    new IllegalArgumentException(
                        "Unable to find an item by id [" + itemId + "] and version [" + version + "]"));

        return ResponseEntity.ok().contentType(itemResource.getMediaType())
            .cacheControl(CacheControl.noCache())
            .body(itemResource.getInputStreamResource());
    }
}
