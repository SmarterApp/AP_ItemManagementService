package org.opentestsystem.ap.ims.task;

import lombok.extern.slf4j.Slf4j;
import org.apache.commons.io.FileUtils;
import org.apache.commons.lang3.StringUtils;
import org.joda.time.DateTime;
import org.opentestsystem.ap.ims.ItemResourceProperties;
import org.springframework.scheduling.annotation.Scheduled;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Date;

@Slf4j
public class ResourceCleanupTask {

    private final ItemResourceProperties itemResourceProperties;

    public ResourceCleanupTask(ItemResourceProperties itemResourceProperties) {
        this.itemResourceProperties = itemResourceProperties;
    }

    @Scheduled(fixedRateString = "${tims-item-resource.cleanupEveryMillis:30000}")
    public void cleanupOldItems() {
        log.debug("resource cleanup: start");

        Path path = Paths.get(this.itemResourceProperties.getResourceDir());

        Date cleanupThresholdDate = new DateTime()
            .minusMillis(this.itemResourceProperties.getCleanupThresholdMillis())
            .toDate();

        this.cleanupFolder(path, cleanupThresholdDate);

        log.debug("resource cleanup: end");
    }

    private void cleanupFolder(Path rootPath, Date cleanupThresholdDate) {
        log.debug("cleanupFolder: path {}, threshold {}", rootPath, cleanupThresholdDate);
        try {
            Files.walk(rootPath, 1)
                .filter(path -> !StringUtils.equals(rootPath.toString(), path.toString()))
                .filter(path -> path.toFile().lastModified() < cleanupThresholdDate.getTime())
                .map(Path::toFile)
                .forEach(FileUtils::deleteQuietly);
        } catch (IOException e) {
            log.debug("cleanupFolder: Folder not found: {}", e.getMessage());
        }
    }
}
