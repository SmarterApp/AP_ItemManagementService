/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestsystem.ap.ims.model;

import lombok.Getter;
import lombok.Setter;
import org.apache.commons.lang3.StringUtils;
import org.opentestsystem.ap.common.exception.ValidationException;
import org.opentestsystem.ap.common.model.AttachmentRequest;
import org.opentestsystem.ap.common.model.ModelUtil;
import org.springframework.web.multipart.MultipartFile;

import static org.apache.commons.lang3.StringUtils.endsWithIgnoreCase;
import static org.apache.commons.lang3.StringUtils.isBlank;
import static org.opentestsystem.ap.common.model.ItemConstants.AttachmentType.GENERAL_ATTACHMENTS;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.TYPE_GI;
import static org.opentestsystem.ap.common.model.ItemConstants.Section.SECTION_CORE;
import static org.opentestsystem.ap.common.model.ItemConstants.Section.SECTION_GLOSSARY;
import static org.opentestsystem.ap.common.model.ModelUtil.ATTACHMENT_LANGUAGE;
import static org.opentestsystem.ap.ims.service.ValidatorMessages.SECTION_REQUIRED;

/**
 * The front end model received for an upload file request.
 */
@Getter
@Setter
public class UploadFile {

    private String itemId;

    private String itemType;

    private String section;

    private String resourceId;

    private String target;

    private String termId;

    private String languageId;

    private String dialectId;

    private MultipartFile file;

    /**
     * Maps an IMS upload file request to a Common attachment request.
     *
     * @return The attachment request.
     */
    public AttachmentRequest newAttachmentRequest() {
        String fileName = file.getOriginalFilename();

        AttachmentRequest attachmentRequest = new AttachmentRequest();
        attachmentRequest.setFileName(fileName);
        attachmentRequest.setSection(section);
        attachmentRequest.setLanguage(ATTACHMENT_LANGUAGE);

        attachmentRequest.setItemId(itemId);
        attachmentRequest.setItemType(itemType);

        attachmentRequest.setTermId(termId);
        attachmentRequest.setLanguageId(languageId);
        attachmentRequest.setDialectId(dialectId);

        if (SECTION_GLOSSARY.equalsIgnoreCase(section)) {
            attachmentRequest.setFolder(SECTION_GLOSSARY);
            attachmentRequest.setFileName(ModelUtil.getGlossaryFileName(attachmentRequest));
            return attachmentRequest;
        }

        if (SECTION_CORE.equalsIgnoreCase(section) && GENERAL_ATTACHMENTS.equalsIgnoreCase(itemType)) {
            attachmentRequest.setFolder(GENERAL_ATTACHMENTS);
            return attachmentRequest;
        }

        if (!TYPE_GI.equalsIgnoreCase(itemType)) {
            ModelUtil.mapAttachmentRequest(attachmentRequest);
            attachmentRequest.setResourceId(resourceId);
            attachmentRequest.setTarget(target);
        }

        return attachmentRequest;
    }

    public void validate() {
        if (StringUtils.isBlank(section)) {
            throw new ValidationException(SECTION_REQUIRED);
        }
        if (isBlank(itemId)) {
            throw new ValidationException("Item ID cannot be blank in upload request");
        }
        if (file == null) {
            throw new ValidationException("No file found in upload request");
        }
        if (file.isEmpty()) {
            throw new ValidationException("File is empty");
        }
        if (TYPE_GI.equalsIgnoreCase(itemType)) {
            validateGiUploadFile();
        }
    }

    public void validateGiUploadFile() {
        String fileName = file.getOriginalFilename();
        if (!endsWithIgnoreCase(fileName, "zip")) {
            throw new ValidationException("File name does not end in '.zip'");
        }
    }
}
