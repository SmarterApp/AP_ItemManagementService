/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestsystem.ap.ims.service;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InOrder;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.itembank.IdGenerator;
import org.opentestsystem.ap.common.management.ItemManager;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemResponse;
import org.opentestsystem.ap.common.model.ItemTransaction;
import org.opentestsystem.ap.common.util.SecurityUtil;
import org.opentestsystem.ap.ims.rest.ItemChangeRequest;
import org.opentestsystem.ap.ims.util.IMSTestUtil;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Matchers.anyString;
import static org.mockito.Mockito.inOrder;
import static org.mockito.Mockito.when;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.TYPE_SA;
import static org.opentestsystem.ap.common.model.ItemConstants.Section.SECTION_CORE;
import static org.opentestsystem.ap.common.model.ItemConstants.Section.SECTION_CREATE;
import static org.opentestsystem.ap.ims.util.IMSTestUtil.COMMIT_MESSAGE;
import static org.opentestsystem.ap.ims.util.IMSTestUtil.HISTORY_ID;
import static org.opentestsystem.ap.ims.util.IMSTestUtil.ITEM_BANK_USER;
import static org.opentestsystem.ap.ims.util.IMSTestUtil.ITEM_ID;

@RunWith(MockitoJUnitRunner.class)
public class ItemServiceTest {

    @Mock
    private ItemManager mockItemManager;

    @Mock
    private SecurityUtil mockSecurityUtil;

    @Mock
    private ItemManagerValidator mockValidator;

    @Mock
    private IdGenerator mockIdGenerator;

    @Mock
    private Item mockItem;

    @Mock
    private ItemManagerEventProducer mockItemManagerEventProducer;

    @Mock
    private DataStoreDataManager mockDataStoreDataManager;

    private ItemManagerService service;

    private IMSTestUtil testUtil;

    private ItemChangeRequest itemChangeRequest;

    @Before
    public void setup() {
        testUtil = new IMSTestUtil();

        when(mockItem.getId()).thenReturn(ITEM_ID);

        when(mockSecurityUtil.getItemBankUser()).thenReturn(ITEM_BANK_USER);
        when(mockSecurityUtil.getUsername()).thenReturn(ITEM_BANK_USER.getUserName());
        when(mockSecurityUtil.getFullname()).thenReturn(ITEM_BANK_USER.getFullName());

        when(mockIdGenerator.generateItemId(anyString())).thenReturn(ITEM_ID);

        itemChangeRequest = new ItemChangeRequest();
        itemChangeRequest.setItem(mockItem);
        itemChangeRequest.setMessage(COMMIT_MESSAGE);

        service = new ItemManagerService(mockItemManager, mockValidator, mockSecurityUtil,
                mockIdGenerator, mockItemManagerEventProducer, mockDataStoreDataManager);
    }

    // ------------------------------------------------------------------------

    @Test
    public void itShouldFindItemHistory() {
        final InOrder inOrder = inOrder(mockValidator, mockItemManager);
        service.findItemHistory(ITEM_ID);
        inOrder.verify(mockValidator).validateFindItemHistory(ITEM_ID);
        inOrder.verify(mockItemManager).findItemHistory(ITEM_ID);
    }

    @Test
    public void itShouldFindItemDiff() {
        final InOrder inOrder = inOrder(mockValidator, mockItemManager);
        service.findItemDiff(ITEM_ID, HISTORY_ID);
        inOrder.verify(mockValidator).validateFindItemDiff(ITEM_ID, HISTORY_ID);
        inOrder.verify(mockItemManager).findItemDiff(ITEM_ID, HISTORY_ID);
    }

    // ------------------------------------------------------------------------

    @Test
    public void itShouldBeginCreateTransaction() {
        final ItemTransaction itemTransaction = testUtil.newItemTransaction(ITEM_BANK_USER.getUserName(), SECTION_CREATE);
        final ItemResponse expectedItemResponse = new ItemResponse(mockItem, newArrayList(itemTransaction));

        final InOrder inOrder = inOrder(mockValidator, mockIdGenerator, mockSecurityUtil, mockItemManager);

        when(mockItemManager.createItem(ITEM_BANK_USER, ITEM_ID, TYPE_SA, COMMIT_MESSAGE)).thenReturn(expectedItemResponse);

        final ItemResponse actualItemResponse = service.beginCreateTransaction(TYPE_SA, COMMIT_MESSAGE);
        assertThat(actualItemResponse).isEqualTo(expectedItemResponse);

        inOrder.verify(mockValidator).validateBeginCreateTransaction(TYPE_SA, COMMIT_MESSAGE);
        inOrder.verify(mockIdGenerator).generateItemId(TYPE_SA);
        inOrder.verify(mockSecurityUtil).getItemBankUser();
        inOrder.verify(mockItemManager).createItem(ITEM_BANK_USER, ITEM_ID, TYPE_SA, COMMIT_MESSAGE);
    }

    @Test
    public void itShouldBeginEditTransaction() {
        final InOrder inOrder = inOrder(mockValidator, mockSecurityUtil, mockItemManager);
        service.beginEditTransaction(ITEM_ID, SECTION_CORE, COMMIT_MESSAGE);
        inOrder.verify(mockValidator).validateBeginEditTransaction(ITEM_ID, SECTION_CORE, COMMIT_MESSAGE);
        inOrder.verify(mockSecurityUtil).getItemBankUser();
        inOrder.verify(mockItemManager).beginItemEdit(ITEM_BANK_USER, ITEM_ID, SECTION_CORE, COMMIT_MESSAGE);
    }

    @Test
    public void itShouldSaveTransaction() {
        final InOrder inOrder = inOrder(mockValidator, mockSecurityUtil, mockItemManager);
        service.saveTransaction(ITEM_ID, itemChangeRequest);
        inOrder.verify(mockValidator).validateSaveTransaction(ITEM_ID, itemChangeRequest);
        inOrder.verify(mockSecurityUtil).getItemBankUser();
        inOrder.verify(mockItemManager).saveItem(ITEM_BANK_USER, mockItem, COMMIT_MESSAGE);
    }

    @Test
    public void itShouldRollbackItem() {
        final InOrder inOrder = inOrder(mockValidator, mockSecurityUtil, mockItemManager);
        service.rollbackTransaction(ITEM_ID);
        inOrder.verify(mockValidator).validateRollbackTransaction(ITEM_ID);
        inOrder.verify(mockSecurityUtil).getItemBankUser();
        inOrder.verify(mockItemManager).rollbackEdits(ITEM_BANK_USER, ITEM_ID);
    }
}
