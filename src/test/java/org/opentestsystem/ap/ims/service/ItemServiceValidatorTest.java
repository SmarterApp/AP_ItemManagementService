/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package org.opentestsystem.ap.ims.service;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.datastore.entity.WorkflowStatusEntity;
import org.opentestsystem.ap.common.datastore.repository.WorkflowStatusRepository;
import org.opentestsystem.ap.common.exception.ValidationException;
import org.opentestsystem.ap.ims.rest.ItemChangeRequest;
import org.opentestsystem.ap.ims.util.IMSTestUtil;

import static org.mockito.Mockito.when;
import static org.opentestsystem.ap.ims.util.IMSTestUtil.COMMIT_MESSAGE;
import static org.opentestsystem.ap.ims.util.IMSTestUtil.FIELD_PATH;
import static org.opentestsystem.ap.ims.util.IMSTestUtil.HISTORY_ID;
import static org.opentestsystem.ap.ims.util.IMSTestUtil.ITEM_ID;
import static org.opentestsystem.ap.ims.util.IMSTestUtil.SECTION;
import static org.opentestsystem.ap.ims.util.IMSTestUtil.WORKFLOW_STATUS_DRAFT;

@RunWith(MockitoJUnitRunner.class)
public class ItemServiceValidatorTest {

    private IMSTestUtil testUtil;

    private ItemServiceValidator validator;

    private ItemChangeRequest itemChangeRequest;

    private ItemChangeRequest fieldChangeRequest;
    @Mock
    private WorkflowStatusRepository mockWorkflowStatusRepository;

    @Mock
    private WorkflowStatusEntity mockWorkflowStatusEntity;

    @Before
    public void setup() {
        testUtil = new IMSTestUtil();

        validator = new ItemServiceValidator(mockWorkflowStatusRepository);

        itemChangeRequest = testUtil.newItemChangeRequest();

        fieldChangeRequest = testUtil.newItemFieldChangeRequest();

        when(mockWorkflowStatusRepository.findFirstByCode(WORKFLOW_STATUS_DRAFT)).thenReturn(mockWorkflowStatusEntity);
    }

    @Test(expected = ValidationException.class)
    public void itShouldValidateFindItemWhenItemIdIsNull() {
        validator.validateFindItem(null);
    }

    @Test
    public void itShouldValidateFindItem() {
        validator.validateFindItem(ITEM_ID);
    }


    @Test(expected = ValidationException.class)
    public void itShouldValidateFindItemHistoryWhenItemIdIsNull() {
        validator.validateFindItemHistory(null);
    }

    @Test
    public void itShouldValidateFindItemHistory() {
        validator.validateFindItemHistory(ITEM_ID);
    }


    @Test(expected = ValidationException.class)
    public void itShouldValidateFindItemDiffWhenHistoryIdIsNull() {
        validator.validateFindItemDiff(ITEM_ID, null);
    }

    @Test(expected = ValidationException.class)
    public void itShouldValidateFindItemDiffWhenItemIdIsNull() {
        validator.validateFindItemDiff(null, HISTORY_ID);
    }

    @Test
    public void itShouldValidateFindItemDiff() {
        validator.validateFindItemDiff(ITEM_ID, HISTORY_ID);
    }


    @Test(expected = ValidationException.class)
    public void itShouldValidateBeginCreateTransactionWhenCommitMessageIsNull() {
        validator.validateBeginCreateTransaction(ITEM_ID, null);
    }

    @Test(expected = ValidationException.class)
    public void itShouldValidateBeginCreateTransactionWhenItemIdIsNull() {
        validator.validateBeginCreateTransaction(null, COMMIT_MESSAGE);
    }

    @Test
    public void itShouldValidateBeginCreateTransaction() {
        validator.validateBeginCreateTransaction(ITEM_ID, COMMIT_MESSAGE);
    }


    @Test(expected = ValidationException.class)
    public void itShouldValidateBeginEditTransactionWhenItemIdIsNull() {
        validator.validateBeginEditTransaction(null, SECTION, COMMIT_MESSAGE);
    }

    @Test(expected = ValidationException.class)
    public void itShouldValidateBeginEditTransactionWhenSectionIsNull() {
        validator.validateBeginEditTransaction(ITEM_ID, null, COMMIT_MESSAGE);
    }

    @Test(expected = ValidationException.class)
    public void itShouldValidateBeginEditTransactionWhenCommitMessageIsNull() {
        validator.validateBeginEditTransaction(ITEM_ID, SECTION, null);
    }

    @Test
    public void itShouldValidateBeginEditTransaction() {
        validator.validateBeginEditTransaction(ITEM_ID, SECTION, COMMIT_MESSAGE);
    }


    @Test(expected = ValidationException.class)
    public void itShouldValidateSaveTransactionWhenItemChangeRequestMessageIsNull() {
        itemChangeRequest.setMessage(null);
        validator.validateSaveTransaction(ITEM_ID, itemChangeRequest);
    }

    @Test(expected = ValidationException.class)
    public void itShouldValidateSaveTransactionWhenItemChangeRequestIsNull() {
        validator.validateSaveTransaction(ITEM_ID, null);
    }

    @Test(expected = ValidationException.class)
    public void itShouldValidateSaveTransactionWhenItemIdIsNull() {
        validator.validateSaveTransaction(null, itemChangeRequest);
    }

    @Test(expected = ValidationException.class)
    public void itShouldValidateNullWorkflowStatus() {
        itemChangeRequest.getItem().getWorkflow().setWorkflowStatusCode(null);
        validator.validateSaveTransaction(ITEM_ID, itemChangeRequest);
    }

    @Test(expected = ValidationException.class)
    public void itShouldValidateInvalifWorkflowStatus() {
        final String invalidStatus = "123ABC";
        when(mockWorkflowStatusRepository.findFirstByCode(invalidStatus)).thenReturn(null);
        itemChangeRequest.getItem().getWorkflow().setWorkflowStatusCode(invalidStatus);
        validator.validateSaveTransaction(ITEM_ID, itemChangeRequest);
    }

    @Test
    public void itShouldValidateSaveTransaction() {
        validator.validateSaveTransaction(ITEM_ID, itemChangeRequest);
    }


    @Test(expected = ValidationException.class)
    public void itShouldValidateCommitTransactionWhenItemChangeRequestMessageIsNull() {
        itemChangeRequest.setMessage(null);
        validator.validateCommitTransaction(ITEM_ID, itemChangeRequest);
    }

    @Test(expected = ValidationException.class)
    public void itShouldValidateCommitTransactionWhenItemChangeRequestItemIsNull() {
        itemChangeRequest.setItem(null);
        validator.validateCommitTransaction(ITEM_ID, itemChangeRequest);
    }

    @Test(expected = ValidationException.class)
    public void itShouldValidateCommitTransactionWhenItemChangeRequestIsNull() {
        validator.validateCommitTransaction(ITEM_ID, null);
    }

    @Test(expected = ValidationException.class)
    public void itShouldValidateCommitTransactionWhenItemIdIsNull() {
        validator.validateCommitTransaction(null, itemChangeRequest);
    }

    @Test
    public void itShouldValidateCommitTransaction() {
        validator.validateCommitTransaction(ITEM_ID, itemChangeRequest);
    }


    @Test(expected = ValidationException.class)
    public void itShouldValidateRollbackTransactionWhenItemIdIsNull() {
        validator.validateRollbackTransaction(null);
    }

    @Test
    public void itShouldValidateRollbackTransaction() {
        validator.validateRollbackTransaction(ITEM_ID);
    }


    @Test
    public void itShouldValidateFieldChange() {
        validator.validateCommitFieldChange(ITEM_ID, FIELD_PATH, fieldChangeRequest);
    }

    @Test(expected = ValidationException.class)
    public void itShouldValidateFieldChangeWhenItemIdIsNull() {
        validator.validateCommitFieldChange(null, FIELD_PATH, fieldChangeRequest);
    }

    @Test(expected = ValidationException.class)
    public void itShouldValidateFieldChangeWhenFieldPathIsNull() {
        validator.validateCommitFieldChange(ITEM_ID, null, fieldChangeRequest);
    }

    @Test(expected = ValidationException.class)
    public void itShouldValidateFieldChangeWhenRequestIsNull() {
        validator.validateCommitFieldChange(ITEM_ID, FIELD_PATH, null);
    }

    @Test(expected = ValidationException.class)
    public void itShouldValidateFieldChangeWhenRequestOldValueIsNull() {
        this.fieldChangeRequest.setOldValue(null);
        validator.validateCommitFieldChange(ITEM_ID, FIELD_PATH, fieldChangeRequest);
    }

    @Test(expected = ValidationException.class)
    public void itShouldValidateFieldChangeWhenRequestNewValueIsNull() {
        this.fieldChangeRequest.setNewValue(null);
        validator.validateCommitFieldChange(ITEM_ID, FIELD_PATH, fieldChangeRequest);
    }
}
