package org.opentestsystem.ap.ims.service;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.shared.contentspecid.ContentSpecId;
import org.opentestsystem.shared.contentspecid.ContentSpecIdConverter;
import org.opentestsystem.shared.contentspecid.enums.ContentSpecFormat;
import org.opentestsystem.shared.contentspecid.exceptions.ErrorSeverity;
import org.opentestsystem.shared.contentspecid.exceptions.ValidationException;

import static org.junit.Assert.assertTrue;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.same;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.mockito.internal.verification.VerificationModeFactory.times;

@RunWith(MockitoJUnitRunner.class)
public class ContentSpecIdUtilTest {

    @Mock
    private ContentSpecIdConverter converter;

    private ContentSpecIdUtil contentSpecIdUtil;

    @Before
    public void setUp() {
        contentSpecIdUtil = new ContentSpecIdUtil(converter);
    }

    @Test
    public void shouldCallLibraryForGoodData() throws Exception {
        contentSpecIdUtil.formatId(
                "itemId",
                "Math",
                "3",
                "2",
                "B",
                "ccss",
                "OA",
                null);

        verify(converter).format(any(ContentSpecId.class), same(ContentSpecFormat.ENHANCED));
    }

    @Test
    public void shouldReturnEmptyForBadSubject() throws Exception {
        String id = contentSpecIdUtil.formatId(
                "itemId",
                "Bad Subject",
                "3",
                "2",
                "B",
                "ccss",
                "OA",
                null);

        assertTrue(id.isEmpty());
        verify(converter, times(0)).format(any(ContentSpecId.class),
                same(ContentSpecFormat.ENHANCED));
    }

    @Test
    public void shouldReturnEmptyForBadGrade() throws Exception {
        String id = contentSpecIdUtil.formatId(
                "itemId",
                "Math",
                "Bad Grade",
                "2",
                "B",
                "ccss",
                "OA",
                null);

        assertTrue(id.isEmpty());
        verify(converter, times(0)).format(any(ContentSpecId.class),
                same(ContentSpecFormat.ENHANCED));
    }

    @Test
    public void shouldReturnEmptyForMissingData() throws Exception {
        String id = contentSpecIdUtil.formatId(
                "itemId",
                null,
                "3",
                null,
                "B",
                "ccss",
                null,
                null);

        assertTrue(id.isEmpty());
        verify(converter, times(0)).format(any(ContentSpecId.class),
                same(ContentSpecFormat.ENHANCED));
    }

    @Test
    public void shouldReturnEmptyForConversionError() throws Exception {
        when(converter.format(any(), any())).thenThrow(
                new ValidationException(ErrorSeverity.INVALID, "Message"));

        // Note failure logs a warning and returns empty string
        String id = contentSpecIdUtil.formatId(
                "itemId",
                "ELA",
                "3",
                "1",
                "B",
                "ccss",
                "bad data",
                null);

        assertTrue(id.isEmpty());
    }

    @Test
    public void shouldAllowBlankCcssForEla() throws Exception {
        contentSpecIdUtil.formatId(
                "itemId",
                "ELA",
                "3",
                "2",
                "A",
                "ccss",
                "RL",
                null);

        verify(converter).format(any(ContentSpecId.class), same(ContentSpecFormat.ENHANCED));
    }

    @Test
    public void shouldNotAllowBlankCcssForMath() throws Exception {
        String id = contentSpecIdUtil.formatId(
                "itemId",
                "Math",
                "3",
                "2",
                "B",
                "",
                "OA",
                null);

        assertTrue(id.isEmpty());
        verify(converter, times(0)).format(any(ContentSpecId.class),
                same(ContentSpecFormat.ENHANCED));
    }

}