/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestsystem.ap.ims.config;

import org.gitlab4j.api.GitLabApi;
import org.gitlab4j.api.models.Namespace;
import org.opentestsystem.ap.common.bulkupdate.BulkUpdateService;
import org.opentestsystem.ap.common.bulkupdate.testadmin.TestAdminProcessor;
import org.opentestsystem.ap.common.bulkupdate.testadmin.TestAdminUtil;
import org.opentestsystem.ap.common.client.GitlabClient;
import org.opentestsystem.ap.common.config.ItemBankProperties;
import org.opentestsystem.ap.common.datastore.*;
import org.opentestsystem.ap.common.datastore.client.AmazonClient;
import org.opentestsystem.ap.common.datastore.repository.ItemEntityRepository;
import org.opentestsystem.ap.common.datastore.repository.SavedSearchRepository;
import org.opentestsystem.ap.common.datastore.repository.WorkflowStatusRepository;
import org.opentestsystem.ap.common.datastore.repository.WorkflowStatusTransitionRepository;
import org.opentestsystem.ap.common.gitlab.GitLabItemManager;
import org.opentestsystem.ap.common.itembank.AttachmentValidator;
import org.opentestsystem.ap.common.itembank.ItemManager;
import org.opentestsystem.ap.common.itembank.manager.ItemManagerImpl;
import org.opentestsystem.ap.common.itembank.repository.EquationEditorRepository;
import org.opentestsystem.ap.common.repository.ItemRepository;
import org.springframework.amqp.rabbit.core.RabbitAdmin;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.cache.CacheManager;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.redis.cache.RedisCacheManager;

import javax.annotation.PostConstruct;

import static org.mockito.Mockito.mock;

/**
 * No ItemBank configuration means we are running under a context where
 * we do not have what is need to connect to an actual Gitlab instance.
 * This configuration replaces the runtime configuration
 */
@Configuration
@ConditionalOnProperty(value = "itembank.test.enabled", havingValue = "true")
public class AppTestConfig {

    public final ItemBankProperties itemBankProperties;

    @Autowired
    public AppTestConfig(ItemBankProperties itemBankProperties) {
        this.itemBankProperties = itemBankProperties;
    }

    @Bean
    public GitlabClient gitlabClient() {
        return new GitlabClientStub(itemBankProperties);
    }

    public class GitlabClientStub extends GitlabClient {
        public GitlabClientStub(ItemBankProperties gitlabProperties) {
            super(gitlabProperties);
        }

        @Override
        @PostConstruct
        public void initialize() {
            setGitLabApi(mock(GitLabApi.class));
            setGroup(mock(Namespace.class));
        }
    }

    // ------------------------------------------------------------------------

    @Bean
    public AmazonClient amazonClient() {
        return mock(AmazonClient.class);
    }

    @Bean
    public DataStoreUtility dataStoreUtility() {
        return new DataStoreUtility();
    }

    @Bean
    public DataStoreAttachmentManager dataStoreAttachmentManager(AmazonClient amazonClient,
                                                                 DataStoreUtility dataStoreUtility) {
        return new DataStoreAttachmentManager(amazonClient, dataStoreUtility);
    }

    @Bean
    public DataStoreDataManager dataStoreDataManager(ItemEntityRepository itemEntityRepository,
                                                     WorkflowStatusRepository workflowStatusRepository,
                                                     WorkflowStatusTransitionRepository workflowStatusTransitionRepository) {
        return new DataStoreDataManager(this.itemBankProperties, itemEntityRepository, workflowStatusRepository, workflowStatusTransitionRepository);
    }

    @Bean
    public DataStoreEventProducer dataStoreEventProducer(RabbitTemplate rabbitTemplate) {
        return new DataStoreEventProducer(this.itemBankProperties, rabbitTemplate);
    }

    @Bean
    public DataStoreItemManager dataStoreItemManager(DataStoreDataManager dataManager,
                                                     DataStoreAttachmentManager attachmentManager,
                                                     DataStoreEventProducer eventProducer,
                                                     DataStoreUtility utility) {
        return new DataStoreItemManager(dataManager, attachmentManager, eventProducer, utility);
    }

    @Bean
    public DataStorePreviewManager DataStorePreviewManager() {
        return mock(DataStorePreviewManager.class);
    }

    // ------------------------------------------------------------------------

    @Bean
    public GitLabItemManager gitLabManager(ItemRepository itemRepository) {
        return new GitLabItemManager(itemRepository);
    }

    // ------------------------------------------------------------------------

    @Bean
    public ItemManager ItemManager(DataStoreItemManager dataStoreManager,
                                   GitLabItemManager gitLabManager,
                                   AttachmentValidator attachmentValidator,
                                   EquationEditorRepository equationEditorRepository) {
        return new ItemManagerImpl(
            dataStoreManager, gitLabManager, attachmentValidator, equationEditorRepository);
    }

    // ------------------------------------------------------------------------

    @Bean
    public TestAdminUtil testAdminUtil() {
        return new TestAdminUtil();
    }

    @Bean
    public TestAdminProcessor testAdminProcessor(DataStoreDataManager dataStoreDataManager,
                                                 DataStoreEventProducer dataStoreEventProducer,
                                                 DataStoreUtility dataStoreUtility,
                                                 TestAdminUtil testAdminUtil) {
        return new TestAdminProcessor(this.itemBankProperties, dataStoreDataManager, dataStoreEventProducer,
            dataStoreUtility, testAdminUtil);
    }

    @Bean
    public BulkUpdateService bulkUpdateService(TestAdminProcessor testAdminProcessor) {
        return new BulkUpdateService(testAdminProcessor);
    }

    // ------------------------------------------------------------------------

    @Bean
    public CacheManager cacheManager() {
        return mock(RedisCacheManager.class);
    }

    @Bean
    public RabbitAdmin rabbitAdmin() {
        return mock(RabbitAdmin.class);
    }

    @Bean
    public RabbitTemplate rabbitTemplate() {
        return mock(RabbitTemplate.class);
    }

    // ------------------------------------------------------------------------

    @Bean
    public WorkflowStatusRepository workflowStatusRepository() {
        return mock(WorkflowStatusRepository.class);
    }

    @Bean
    public ItemEntityRepository itemEntityRepository() {
        return mock(ItemEntityRepository.class);
    }

    @Bean
    public SavedSearchRepository savedSearchRepository() {
        return mock(SavedSearchRepository.class);
    }

    @Bean
    public WorkflowStatusTransitionRepository workflowStatusTransitionRepository() {
        return mock(WorkflowStatusTransitionRepository.class);
    }
}
