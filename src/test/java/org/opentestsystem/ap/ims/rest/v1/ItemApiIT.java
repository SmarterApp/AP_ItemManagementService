/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestsystem.ap.ims.rest.v1;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.ap.common.config.ItemBankProperties;
import org.opentestsystem.ap.common.datastore.DataStorePreviewManager;
import org.opentestsystem.ap.common.datastore.repository.ItemEntityRepository;
import org.opentestsystem.ap.common.datastore.repository.SavedSearchRepository;
import org.opentestsystem.ap.common.datastore.repository.SequenceRepository;
import org.opentestsystem.ap.common.datastore.repository.WorkflowStatusRepository;
import org.opentestsystem.ap.common.exception.ResourceNotFoundException;
import org.opentestsystem.ap.common.exception.SystemException;
import org.opentestsystem.ap.common.model.AbstractItem;
import org.opentestsystem.ap.common.model.ItemResponse;
import org.opentestsystem.ap.common.util.SecurityUtil;
import org.opentestsystem.ap.ims.rest.BeginTransactionRequest;
import org.opentestsystem.ap.ims.rest.ItemChangeRequest;
import org.opentestsystem.ap.ims.service.FileUploadService;
import org.opentestsystem.ap.ims.service.ItemService;
import org.opentestsystem.ap.ims.service.SavedSearchService;
import org.opentestsystem.ap.ims.service.export.ItemExportService;
import org.opentestsystem.ap.ims.util.IMSTestUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.MediaType;
import org.springframework.http.converter.HttpMessageConverter;
import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;
import org.springframework.mock.http.MockHttpOutputMessage;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.web.util.NestedServletException;

import java.io.IOException;
import java.nio.charset.Charset;
import java.util.Arrays;

import static org.hamcrest.Matchers.is;
import static org.junit.Assert.assertNotNull;
import static org.mockito.BDDMockito.given;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.eq;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.TYPE_SA;
import static org.opentestsystem.ap.common.model.ItemConstants.Section.SECTION_BRAILLE;
import static org.opentestsystem.ap.common.model.ItemConstants.Section.SECTION_CORE;
import static org.opentestsystem.ap.ims.util.IMSTestUtil.COMMIT_MESSAGE;
import static org.opentestsystem.ap.ims.util.IMSTestUtil.HISTORY_ID;
import static org.opentestsystem.ap.ims.util.IMSTestUtil.ITEM_BANK_USER;
import static org.opentestsystem.ap.ims.util.IMSTestUtil.ITEM_BANK_USER2;
import static org.opentestsystem.ap.ims.util.IMSTestUtil.ITEM_ID;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.patch;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@ActiveProfiles(value = "it-test")
@RunWith(SpringRunner.class)
@WebMvcTest(ItemApi.class)
public class ItemApiIT {

    private final String API_BASE_PATH = "/api/v1/items/";

    private final String SECTION = "/" + SECTION_CORE;

    private final String TRANSACTIONS = "/transactions";

    private final MediaType contentType = new MediaType(MediaType.APPLICATION_JSON.getType(),
        MediaType.APPLICATION_JSON.getSubtype(), Charset.forName("utf8"));

    @Configuration
    @ComponentScan(basePackageClasses = { ItemApi.class })
    public static class TestConf {
    }

    @Autowired
    private MockMvc mvc;

    @MockBean
    private ItemService itemService;

    @MockBean
    private FileUploadService fileUploadService;

    @MockBean
    private WorkflowStatusRepository workflowStatusRepository;

    @MockBean
    private SavedSearchRepository savedSearchRepository;

    @MockBean
    private SequenceRepository sequenceRepository;

    @MockBean
    private ItemEntityRepository itemEntityRepository;

    @MockBean
    private SecurityUtil securityUtil;

    @MockBean
    private ItemBankProperties itemBankProperties;

    @MockBean
    private SavedSearchService savedSearchService;

    @MockBean
    private ItemExportService itemExportService;

    @MockBean
    private DataStorePreviewManager dataStorePreviewManager;

    private HttpMessageConverter mappingJackson2HttpMessageConverter;

    private IMSTestUtil testUtil = new IMSTestUtil();

    @Autowired
    void setConverters(HttpMessageConverter<?>[] converters) {
        this.mappingJackson2HttpMessageConverter = Arrays.asList(converters).stream()
            .filter(hmc -> hmc instanceof MappingJackson2HttpMessageConverter)
            .findAny()
            .orElse(null);

        assertNotNull("the JSON message converter must not be null",
            this.mappingJackson2HttpMessageConverter);
    }

    // ------------------------------------------------------------------------

    @Test(expected = NestedServletException.class)
    public void itShouldHandleResourceNotFound() throws Exception {

        final String errorMessage = "There was a resource not found";

        given(itemService.findItem(ITEM_ID)).willThrow(new ResourceNotFoundException(errorMessage));

        mvc.perform(get(API_BASE_PATH + ITEM_ID).contentType(contentType))
            .andExpect(status().isNotFound())
            .andExpect(jsonPath("$.[0].message", is(errorMessage)));
    }

    @Test(expected = NestedServletException.class)
    public void itShouldHandleInternalServerError() throws Exception {

        final String errorMessage = "There was a server error";

        given(itemService.findItem(ITEM_ID)).willThrow(new SystemException(errorMessage));

        mvc.perform(get(API_BASE_PATH + ITEM_ID).contentType(contentType))
            .andExpect(status().isInternalServerError())
            .andExpect(jsonPath("$.[0].message", is(errorMessage)));
    }

    @Test
    public void itShouldGetItem() throws Exception {
        final ItemResponse expectedItemResponse = testUtil.newItemResponse();
        given(itemService.findItem(ITEM_ID)).willReturn(expectedItemResponse);

        mvc.perform(get(API_BASE_PATH + ITEM_ID).contentType(contentType))
            .andExpect(status().isOk())
            .andExpect(jsonPath("$.item.id", is(ITEM_ID)))
            .andExpect(jsonPath("$.item.type", is(TYPE_SA)))
            .andExpect(jsonPath("$.transactions[0].userName", is(ITEM_BANK_USER.getUserName())))
            .andExpect(jsonPath("$.transactions[0].section", is(SECTION_CORE)))
            .andExpect(jsonPath("$.transactions[1].userName", is(ITEM_BANK_USER2.getUserName())))
            .andExpect(jsonPath("$.transactions[1].section", is(SECTION_BRAILLE)));

        verify(itemService, times(1)).findItem(ITEM_ID);
    }

    @Test
    public void isShouldGetItemHistory() throws Exception {
            mvc.perform(get(API_BASE_PATH + ITEM_ID + "/versions").contentType(contentType)).andExpect(status().isOk());
        verify(itemService, times(1)).findItemHistory(ITEM_ID);
    }

    @Test
    public void isShouldGetItemDiff() throws Exception {
        mvc.perform(get(API_BASE_PATH + ITEM_ID + "/diff/" + HISTORY_ID).contentType(contentType))
            .andExpect(status().isOk());
        verify(itemService, times(1)).findItemDiff(ITEM_ID, HISTORY_ID);
    }

    // ------------------------------------------------------------------------

    @Test
    public void itShouldCreateNewItem() throws Exception {
        final String type = TYPE_SA;

        final BeginTransactionRequest newItemRequest = new BeginTransactionRequest();
        newItemRequest.setType(type);
        newItemRequest.setMessage(COMMIT_MESSAGE);

        final ItemResponse expectedItemResponse = testUtil.newItemResponse();

        given(itemService.beginCreateTransaction(type, COMMIT_MESSAGE)).willReturn(expectedItemResponse);

        mvc.perform(post(API_BASE_PATH + TRANSACTIONS)
            .contentType(contentType)
            .content(json(newItemRequest)))
            .andExpect(status().isOk());

        verify(itemService, times(1)).beginCreateTransaction(type, COMMIT_MESSAGE);
    }

    @Test
    public void itShouldBeginItemEdit() throws Exception {
        final BeginTransactionRequest newItemRequest = new BeginTransactionRequest();
        newItemRequest.setMessage(COMMIT_MESSAGE);

        mvc.perform(post(API_BASE_PATH + ITEM_ID + TRANSACTIONS + SECTION)
            .contentType(contentType)
            .content(json(newItemRequest)))
            .andExpect(status().isOk());

        verify(itemService, times(1)).beginEditTransaction(ITEM_ID, SECTION_CORE, COMMIT_MESSAGE);
    }

    @Test
    public void itShouldSaveTransaction() throws Exception {
        final AbstractItem item = testUtil.newSaItem();

        final ItemChangeRequest request = new ItemChangeRequest();
        request.setItem(item);
        request.setMessage(COMMIT_MESSAGE);

        mvc.perform(patch(API_BASE_PATH + ITEM_ID)
            .contentType(contentType)
            .content(json(request)))
            .andExpect(status().isOk());

        verify(itemService, times(1)).saveTransaction(eq(ITEM_ID), any(ItemChangeRequest.class));
    }

    @Test
    public void itShouldCommitTransaction() throws Exception {
        final AbstractItem item = testUtil.newSaItem();

        final ItemChangeRequest request = new ItemChangeRequest();
        request.setItem(item);
        request.setMessage(COMMIT_MESSAGE);

        mvc.perform(put(API_BASE_PATH + ITEM_ID + TRANSACTIONS)
            .contentType(contentType)
            .content(json(request)))
            .andExpect(status().isOk());

        verify(itemService, times(1)).commitTransaction(eq(ITEM_ID), any(ItemChangeRequest.class));
    }

    @Test
    public void itShouldRollbackTransaction() throws Exception {
        mvc.perform(delete(API_BASE_PATH + ITEM_ID + TRANSACTIONS)
            .contentType(contentType))
            .andExpect(status().isOk());

        verify(itemService, times(1)).rollbackTransaction(ITEM_ID);
    }

    // ------------------------------------------------------------------------

    protected String json(Object o) throws IOException {
        MockHttpOutputMessage mockHttpOutputMessage = new MockHttpOutputMessage();
        this.mappingJackson2HttpMessageConverter.write(o, MediaType.APPLICATION_JSON, mockHttpOutputMessage);
        return mockHttpOutputMessage.getBodyAsString();
    }
}
