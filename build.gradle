/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.tasks.image.DockerRemoveImage
import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    ext {
        springBootVersion = '1.5.2.RELEASE'
    }
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'io.github.robwin:jgitflow-gradle-plugin:0.5.0'
    }
}

plugins {
    id 'java'
    id 'idea'
    id 'checkstyle'
    id 'pmd'
    id 'findbugs'
    id 'jacoco'
    id 'maven-publish'
    id 'org.springframework.boot'               version '1.5.2.RELEASE'
    id 'com.jfrog.artifactory'                  version '4.4.14'
    id 'com.bmuschko.docker-remote-api'         version '3.0.11'
    id "org.flywaydb.flyway"                    version "4.2.0"

}

apply plugin: 'io.github.robwin.jgitflow'
apply plugin: 'project-report'

/***************************
 * dependency management
 ***************************/

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://repo.spring.io/milestone" }
    maven { url "https://airdev.jfrog.io/airdev/libs-releases/" }
    maven { url "https://airdev.jfrog.io/airdev/libs-snapshots/" }
}

configurations {
    compile.exclude module: 'spring-boot-starter-logging'
}

dependencies {
    compile 'org.opentestsystem.ap:ap-common:0.4.30-SNAPSHOT'

    compile 'org.springframework.boot:spring-boot-starter-actuator'
    compile 'org.springframework.boot:spring-boot-starter-security'
    compile 'org.springframework.boot:spring-boot-starter-aop'
    compile 'org.springframework.boot:spring-boot-starter-amqp'
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-log4j2'
    compile 'org.springframework.boot:spring-boot-starter-freemarker'
    compile 'org.springframework.boot:spring-boot-starter-cache'
    compile 'org.springframework.boot:spring-boot-starter-data-redis'
    compile 'org.springframework.boot:spring-boot-starter-data-jpa'

    compile 'org.springframework.cloud:spring-cloud-starter-config'

    compile 'org.springframework.security.extensions:spring-security-saml2-core:1.0.2.RELEASE'
    compile 'org.springframework.retry:spring-retry'
    compile 'org.springframework.session:spring-session'

    compile 'org.eclipse.jgit:org.eclipse.jgit:4.10.0.201712302008-r'

    compile 'org.apache.commons:commons-collections4:4.1'
    compile 'org.apache.commons:commons-lang3:3.5'

    compile 'com.google.guava:guava:22.0'

    compile 'org.apache.logging.log4j:log4j-api:2.10.0'
    compile 'org.apache.logging.log4j:log4j-core:2.10.0'
    compile 'org.apache.logging.log4j:log4j-slf4j-impl:2.10.0'

    compile 'com.lmax:disruptor:3.3.7'

    compile 'io.github.openfeign:feign-gson:9.3.1'

    compile 'io.springfox:springfox-swagger2:2.6.1'
    compile 'io.springfox:springfox-swagger-ui:2.6.1'

    compile 'org.hibernate:hibernate-java8:5.0.12.Final'
    compile 'com.vladmihalcea:hibernate-types-5:2.2.0'

    compile 'org.postgresql:postgresql:42.2.4'

    compile 'org.flywaydb:flyway-core:4.2.0'

    //Used for PDF generation
    compile group: 'com.itextpdf', name: 'itext7-core', version: '7.1.3', ext: 'pom'
    compile group: 'com.itextpdf', name: 'html2pdf', version: '2.1.0'

    compileOnly 'org.projectlombok:lombok'

    runtime 'org.springframework.boot:spring-boot-devtools'

    testCompile 'org.springframework.boot:spring-boot-starter-test'

    testCompile 'org.hsqldb:hsqldb'
}

dependencyManagement {
    imports {
        mavenBom 'org.springframework.cloud:spring-cloud-dependencies:Dalston.RELEASE'
    }
}

/***************************
 * build information
 ***************************/

springBoot {
    buildInfo()
}

processResources {
    filesMatching("**/application.yml") {
        expand project.properties
    }
}

/***************************
 * publishing
 ***************************/

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
}

publishing.publications {
    mavenJava(MavenPublication) {
        from components.java

        artifact sourceJar {
            classifier "sources"
        }
    }
}

artifactory {
    contextUrl = artifactoryUrl

    publish {
        repository {
            repoKey  = project.version.contains('-SNAPSHOT') ? project.artifactorySnapshotPublish : project.artifactoryReleasePublish
            username = project.artifactoryUser
            password = project.artifactoryPassword
            maven	 = true
        }
        defaults {
            publications ('mavenJava')
        }
    }
}

/***************************
 * kubernetes (k8s)
 ***************************/

task k8sCopyFiles(type: Copy) {

    from('src/main/kubernetes/') {
        filter(ReplaceTokens, tokens: [version              : project.version,
                                       dockerTagBase        : project.dockerTagBase,
                                       kubecfgState         : project.kubecfgState,
                                       kubecfgName          : project.kubecfgName,
                                       kubecfgDeployment    : project.kubecfgDeployment])
    }

    into 'build/kubernetes'
}

task k8sCopyFilesUat(type: Copy) {

    from('src/main/kubernetes/') {
        filter(ReplaceTokens, tokens: [version              : project.version,
                                       dockerTagBase        : project.dockerTagBase,
                                       kubecfgState         : project.kubecfgState,
                                       kubecfgName          : project.kubecfgNameUat,
                                       kubecfgDeployment    : project.kubecfgDeployment])
    }

    into 'build/kubernetes'
}

/***************************
 * docker
 ***************************/

docker {
    registryCredentials {
        username = project.dockerHubUser
        password = project.dockerHubPassword
        email = project.dockerHubEmail
    }
}

task dockerCopyFiles(type: Copy) {
    dependsOn 'bootRepackage'

    from('src/main/docker/') {
        filter(ReplaceTokens, tokens: [USER_HOME:           System.env.HOME,
                                       configServerVersion: project.configServerVersion,
                                       version:             project.version,
                                       dockerTagBase:       project.dockerTagBase])
    }

    from("build/libs/${jar.archiveName}") {
        // drop version from artifact name
        rename { String fileName ->
            fileName.replace("-${project.version}", "")
        }
    }

    into 'build/docker'
}

task dockerBuildImage(type: DockerBuildImage) {
    dependsOn 'dockerCopyFiles'
    inputDir = project.file('build/docker/')
    tag = "${project.dockerTagBase}/${jar.baseName}:${project.version}"
}

task dockerPushImage(type: DockerPushImage) {
    dependsOn 'dockerBuildImage'
    imageName = "${project.dockerTagBase}/${jar.baseName}:${project.version}"
}

task dockerRemoveImage(type: DockerRemoveImage) {
    imageId = "${project.dockerTagBase}/${jar.baseName}:${project.version}"
}

/***************************
 * Checkstyle
 ***************************/

checkstyle {
    ignoreFailures = true
}

/***************************
 * PMD
 ***************************/

pmd {
    ignoreFailures = true

    ruleSets = [
            'java-basic',
            'java-braces',
            'java-clone',
            'java-codesize',
            'java-coupling',
            'java-design',
            'java-empty',
            'java-finalizers',
            'java-imports',
            'java-j2ee',
            'java-javabeans',
            'java-junit',
            'java-naming',
            'java-optimizations',
            'java-strictexception',
            'java-strings',
            'java-sunsecure',
            'java-typeresolution',
            'java-unnecessary',
            'java-unusedcode'
    ]
}

/***************************
 * FindBugs
 ***************************/

findbugs {
    ignoreFailures = true
    reportLevel = "medium"
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
	    html.stylesheet resources.text.fromFile('config/findbugs/findbugs-color.xsl')
    }
}


/***************************
 * DB Migration
 ***************************/

// http://www.jeremyjarrell.com/using-flyway-db-with-distributed-version-control/
// https://gist.github.com/jeremyjarrell/6083207
// Had to adjust the gist and put a 'V' on the front of the file or Flyway wouldn't run it
task prefixNewMigrations {
    fileTree(dir: 'src/main/resources/db/migration').exclude({ isFilePrefixed(it.file) }).each { file ->
        doLast {
            def timestamp = new Date().format('yyyyMMddHHmmssSSS', TimeZone.getTimeZone('GMT'))
            println "Renaming $file.name to V${timestamp}__$file.name"
            file.renameTo("${file.parentFile.absolutePath}${file.separator}V${timestamp}__$file.name")
            // Sleep for a moment to avoid prefix conflicts when renaming multiple files
            sleep(1000)
        }
    }
}

def isFilePrefixed(file) {
    return (file.name ==~ '^[V]\\d+__.*\\.sql\$')
}

flyway {
    url = project.dbUrl
    user = project.dbUser
    password = project.dbPassword
    schemas = ['iat']
}

/***************************
 * gradle wrapper
 ***************************/

task wrapper(type: Wrapper) {
    gradleVersion = '3.4.1'
}

/***************************
 * Lifecycle enhancements
 ***************************/

tasks.artifactoryPublish.dependsOn 'build'

test.finalizedBy(jacocoTestReport)
